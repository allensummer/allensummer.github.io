<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WMind Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-04T13:02:54.554Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Allen Wolf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>opencv之HighGUI</title>
    <link href="http://yoursite.com/2016/05/04/opencv%E4%B9%8BHighGUI/"/>
    <id>http://yoursite.com/2016/05/04/opencv之HighGUI/</id>
    <published>2016-05-04T12:44:37.000Z</published>
    <updated>2016-05-04T13:02:54.554Z</updated>
    
    <content type="html">&lt;p&gt;HighGUI包含OpenCV与操作系统、文件系统和摄像机之类的硬件进行交互的一些函数，我们可以方便地打开窗口、显示图像、读出或者写入图像相关的文件（包含图像和视频）、处理简单的鼠标、光标和键盘时间。主要分为三大部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件部分，对于摄像机的操作&lt;/li&gt;
&lt;li&gt;文件系统部分，载入与保存图像文件&lt;/li&gt;
&lt;li&gt;窗口系统，提供一下简单的函数用来打开窗口以及将图像显示在窗口中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的代码主要关于窗口系统与鼠标事件回调,其他部分，当需要的时候再查阅文档。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cv.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;highgui.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义鼠标事件的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_mouse_callback&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; event, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* param &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvRect box;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; drawing_box = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 绘制方框&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw_box&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( IplImage* img, CvRect rect )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvRectangle (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvPoint(box.x,box.y),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvPoint(box.x+box.width,box.y+box.height),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvScalar(&lt;span class=&quot;number&quot;&gt;0xff&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0x00&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0x00&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;/* red */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* argv[] )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  box = cvRect(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IplImage* image = cvCreateImage( &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvSize(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IPL_DEPTH_8U,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvZero( image );&lt;span class=&quot;comment&quot;&gt;//初始化图像像素为0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IplImage* temp = cvCloneImage( image );&lt;span class=&quot;comment&quot;&gt;//clone&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvNamedWindow( &lt;span class=&quot;string&quot;&gt;&quot;Box Example&quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//设置鼠标时间的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvSetMouseCallback( &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Box Example&quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    my_mouse_callback, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*) image &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvCopyImage( image, temp );&lt;span class=&quot;comment&quot;&gt;//缓存图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( drawing_box ) draw_box( temp, box ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvShowImage( &lt;span class=&quot;string&quot;&gt;&quot;Box Example&quot;&lt;/span&gt;, temp );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( cvWaitKey( &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; )==&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt; ) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Be tidy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvReleaseImage( &amp;amp;image );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvReleaseImage( &amp;amp;temp );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvDestroyWindow( &lt;span class=&quot;string&quot;&gt;&quot;Box Example&quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This is our mouse callback.  If the user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这个是鼠标的回调，如果用户按住左边的键，开始绘制，当释放的时候，增加选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//矩形框到现在的图片，当鼠标左键再次按下，释放上次的矩形框&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_mouse_callback&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; event, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* param )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IplImage* image = (IplImage*) param;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;( event ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CV_EVENT_MOUSEMOVE: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( drawing_box ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        box.width  = x-box.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        box.height = y-box.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CV_EVENT_LBUTTONDOWN: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      drawing_box = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      box = cvRect( x, y, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CV_EVENT_LBUTTONUP: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      drawing_box = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( box.width&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        box.x+=box.width;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        box.width *=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( box.height&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        box.y+=box.height; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        box.height*=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      draw_box( image, box );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrn7f.com1.z0.glb.clouddn.com/16-5-4/90369203.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;HighGUI包含OpenCV与操作系统、文件系统和摄像机之类的硬件进行交互的一些函数，我们可以方便地打开窗口、显示图像、读出或者写入图像相关的文件（包含图像和视频）、处理简单的鼠标、光标和键盘时间。主要分为三大部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件部分，对于摄像机的操作&lt;/li&gt;
&lt;li&gt;文件系统部分，载入与保存图像文件&lt;/li&gt;
&lt;li&gt;窗口系统，提供一下简单的函数用来打开窗口以及将图像显示在窗口中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的代码主要关于窗口系统与鼠标事件回调,其他部分，当需要的时候再查阅文档。&lt;br&gt;
    
    </summary>
    
      <category term="opencv" scheme="http://yoursite.com/categories/opencv/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
      <category term="机器视觉" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>什么是机器学习</title>
    <link href="http://yoursite.com/2016/05/04/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/05/04/什么是机器学习/</id>
    <published>2016-05-04T12:29:31.530Z</published>
    <updated>2016-05-04T12:29:31.530Z</updated>
    
    <content type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;　　在介绍机器学习之前，我想先列几个关于机器学习的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垃圾邮件检测：根据邮箱中的邮件，识别哪些是垃圾邮件，哪些不是。这样的模型，可以程序帮助归类垃圾邮件和非垃圾邮件。这个例子，我们应该都不陌生。&lt;/li&gt;
&lt;li&gt;信用卡欺诈检测：根据用户一个月内的信用卡交易，识别哪些交易是该用户操作的，哪些不是。这样的决策模型，可以帮助程序退还那些欺诈交易。&lt;/li&gt;
&lt;li&gt;数字识别：根据信封上手写的邮编，识别出每一个手写字符所代表的数字。这样的模型，可以帮助程序阅读和理解手写邮编，并根据地利位置分类信件。&lt;/li&gt;
&lt;li&gt;语音识别：从一个用户的话语，确定用户提出的具体要求。这样的模型，可以帮助程序能够并尝试自动填充用户需求。带有Siri系统的iPhone就有这种功能。&lt;/li&gt;
&lt;li&gt;人脸识别：根据相册中的众多数码照片，识别出那些包含某一个人的照片。这样的决策模型，可以帮助程序根据人脸管理照片。某些相机或软件，如iPhoto，就有这种功能。&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7cc829d3gw1eebxsvbwnhj20hc0d2jt6.jpg&quot; alt=&quot;人脸识别&quot;&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;产品推荐：根据一个用户的购物记录和冗长的收藏清单，识别出这其中哪些是该用户真正感兴趣，并且愿意购买的产品。这样的决策模型，可以帮助程序为客户提供建议并鼓励产品消费。登录Facebook或GooglePlus，它们就会推荐可能有关联的用户给你。&lt;/li&gt;
&lt;li&gt;医学分析：根据病人的症状和一个匿名的病人资料数据库，预测该病人可能患了什么病。这样的决策模型，可以程序为专业医疗人士提供支持。&lt;/li&gt;
&lt;li&gt;股票交易：根据一支股票现有的和以往的价格波动，判断这支股票是该建仓、持仓还是减仓。这样的决策模型，可以帮助程序为金融分析提供支持。&lt;/li&gt;
&lt;li&gt;客户细分：根据用户在试用期的的行为模式和所有用户过去的行为，识别出哪些用户会转变成该产品的付款用户，哪些不会。这样的决策模型，可以帮助程序进行用户干预，以说服用户早些付款使用或更好的参与产品试用。&lt;/li&gt;
&lt;li&gt;形状鉴定：根据用户在触摸屏幕上的手绘和一个已知的形状资料库，判断用户想描绘的形状。这样的决策模型，可以帮助程序显示该形状的理想版本，以绘制清晰的图像。iPhone应用Instaviz就能做到这样。[1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;机器学习(Machine Learning, ML)&lt;/strong&gt;是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。它是人工智能的核心，主要使用&lt;strong&gt;归纳、综合而不是演绎&lt;/strong&gt;[2]&lt;/p&gt;
&lt;p&gt;关于机器学习的定义有很多，一种经常被引用的英文定义是：A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.[3]&lt;/p&gt;
&lt;p&gt;上面的这个定义如何理解呢？想象一下有一个邮箱过滤程序接受到一封邮件，该程序如何判断这封邮件是不是垃圾邮件呢？首先这封邮件先观察你之前标记过是不是垃圾邮件的邮件，基于这个学习到的经验，该过滤程序为你过滤掉垃圾邮件了。在这个任务中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断邮件是不是垃圾邮件,这个&lt;strong&gt;任务T&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;观察到你之前标记过是不是垃圾邮件的邮件，这个是&lt;strong&gt;经验E&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;正确分类垃圾邮件与非垃圾邮件的数量，这个是&lt;strong&gt;性能P&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/space/2012/0515/151727_DtZB_260935.jpg&quot; alt=&quot;163邮箱&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;机器学习分类&quot;&gt;&lt;a href=&quot;#机器学习分类&quot; class=&quot;headerlink&quot; title=&quot;机器学习分类&quot;&gt;&lt;/a&gt;机器学习分类&lt;/h1&gt;&lt;p&gt;从最广义的讲，任何涉及机器学习所用的方法，只要它利用了训练样本的信息，都可以认为运用了学习。实践中和有意义的机器学习都是如此困难，以至于根本无法实现猜测出一个最佳的分类判决。因此大部分的时间都运用与研究学习问题。实现一个机器学习算法设计：给定一般的模型或分类器的形式，利用训练样本去学习或评估模型的未知参数。这里的学习指用某种算法来降低训练样本的分类误差。一大类基于梯度下降的算法，能够调节分类器的参数，使它朝着能够降低误差的方向前进，目前已成为机器学习领域的主流学习算法。[4]&lt;br&gt;在一个机器学习的应用中，根据数据类型的不同，对一个问题的建模有不同的方式。在机器学习或者人工智能领域，人们首先会考虑算法的学习方式。在机器学习领域，有几种主要的学习方式。将算法按照学习方式分类是一个不错的想法，这样可以让人们在建模和算法选择的时候考虑能根据输入数据来选择最合适的算法来获得最好的结果。[5]&lt;/p&gt;
&lt;h2 id=&quot;监督式学习&quot;&gt;&lt;a href=&quot;#监督式学习&quot; class=&quot;headerlink&quot; title=&quot;监督式学习&quot;&gt;&lt;/a&gt;监督式学习&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/7cc829d3gw1ekoj9ozt1xj208c06nq31.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;在监督式学习下，输入数据被称为“训练数据”，每组训练数据有一个明确的标识或结果，如对防垃圾邮件系统中“垃圾邮件”“非垃圾邮件”，对手写数字识别中的“1“，”2“，”3“，”4“等。在建立预测模型的时候，监督式学习建立一个学习过程，将预测结果与“训练数据”的实际结果进行比较，不断的调整预测模型，直到模型的预测结果达到一个预期的准确率。监督式学习的常见应用场景如分类问题和回归问题。常见的算法有：逻辑回归，感知机，SVM支持向量机。&lt;/p&gt;
&lt;h2 id=&quot;非监督学习&quot;&gt;&lt;a href=&quot;#非监督学习&quot; class=&quot;headerlink&quot; title=&quot;非监督学习&quot;&gt;&lt;/a&gt;非监督学习&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/7cc829d3gw1ekoj9pp0wxj208c069mxc.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;在非监督式学习中，数据并不被特别标识，学习模型是为了推断出数据的一些内在结构。常见的应用场景包括关联规则的学习以及聚类等。常见算法包括：Apriori算法以及k-Means算法。&lt;/p&gt;
&lt;h2 id=&quot;半监督学习&quot;&gt;&lt;a href=&quot;#半监督学习&quot; class=&quot;headerlink&quot; title=&quot;半监督学习&quot;&gt;&lt;/a&gt;半监督学习&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/7cc829d3gw1ekoj9qcia3j208c05kq3b.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;在此学习方式下，输入数据部分被标识，部分没有被标识，这种学习模型可以用来进行预测，但是模型首先需要学习数据的内在结构以便合理的组织数据来进行预测。应用场景包括分类和回归，算法包括一些对常用监督式学习算法的延伸，这些算法首先试图对未标识数据进行建模，在此基础上再对标识的数据进行预测。如图论推理算法（Graph Inference）或者拉普拉斯支持向量机（Laplacian SVM.）等。&lt;/p&gt;
&lt;h2 id=&quot;强化学习&quot;&gt;&lt;a href=&quot;#强化学习&quot; class=&quot;headerlink&quot; title=&quot;强化学习&quot;&gt;&lt;/a&gt;强化学习&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/7cc829d3gw1ekoj9r0xldj208c04wgls.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt;在这种学习模式下，输入数据作为对模型的反馈，不像监督模型那样，输入数据仅仅是作为一个检查模型对错的方式，在强化学习下，输入数据直接反馈到模型，模型必须对此立刻作出调整。常见的应用场景包括动态系统以及机器人控制等。常见算法包括Q-Learning以及时间差学习（Temporal difference learning）&lt;/p&gt;
&lt;h1 id=&quot;机器学习框架&quot;&gt;&lt;a href=&quot;#机器学习框架&quot; class=&quot;headerlink&quot; title=&quot;机器学习框架&quot;&gt;&lt;/a&gt;机器学习框架&lt;/h1&gt;&lt;p&gt;在机器学习领域有很&lt;a href=&quot;http://&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;多的框架、库以及软件。比较出名的有：C++的opencv, shark等，java中weka、hadoop的mahout、spark的mllib，matlab中的LibSVM、caffe，python的scikit-learn、NLTK、theano、brain、caffe等。&lt;a href=&quot;https://github.com/josephmisiti/awesome-machine-learning&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机器学习框架、库与软件列表&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;目录（持续更新）&quot;&gt;&lt;a href=&quot;#目录（持续更新）&quot; class=&quot;headerlink&quot; title=&quot;目录（持续更新）&quot;&gt;&lt;/a&gt;目录（持续更新）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基础知识  &lt;!--* 概率论
  * 模型评估与选择
  * 维灾难
  * 决策论
  * 信息论--&gt;&lt;/li&gt;
&lt;li&gt;概率分布  &lt;!--* 二项式分布
  * 多项式分布
  * 高斯分布
  * 指数分布族
  * 非常数分布--&gt;&lt;/li&gt;
&lt;li&gt;回归&lt;ul&gt;
&lt;li&gt;CART：分类和回归树算法&lt;/li&gt;
&lt;li&gt;SVR支持向量回归&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分类&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/earl211/article/details/48974865&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;感知机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;逻辑回归&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/04/08/逻辑斯蒂（Logistic-回归/#more&quot;&gt;逻辑回归&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2016/04/09/logistic实现/&quot;&gt;逻辑回归实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2016/04/09/scikit-learn中的逻辑回归/&quot;&gt;scikit-learn中的逻辑回归&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分类决策数算法C4.5&lt;/li&gt;
&lt;li&gt;最近邻分类&lt;/li&gt;
&lt;li&gt;朴素贝叶斯算法&lt;/li&gt;
&lt;li&gt;CART：分类和回归树算法&lt;/li&gt;
&lt;li&gt;Ada Boost迭代算法&lt;/li&gt;
&lt;li&gt;支持向量机&lt;/li&gt;
&lt;li&gt;图模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;聚类&lt;ul&gt;
&lt;li&gt;k均值聚类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时间序列&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/03/29/test/&quot;&gt;时间序列完全教程（R）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HMM隐马尔科夫模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;降维&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/04/08/LDA浅显理解/&quot;&gt;LDA浅显理解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他算法&lt;ul&gt;
&lt;li&gt;最大期望（EM）算法&lt;/li&gt;
&lt;li&gt;Apriori算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最优化算法&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/04/14/挑战程序设计竞赛-抽签/&quot;&gt;梯度下降法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#参考资料&lt;br&gt;[1] &lt;a href=&quot;http://blog.jobbole.com/62334&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机器学习十个实例&lt;/a&gt;&lt;br&gt;[2] &lt;a href=&quot;http://baike.baidu.com/link?url=yeJM3HqBaKfzroNnRkaFt2Uya85p822Ct2Ke6DSQQtono8-JJdfB9iBiiz3uc35WfwuN5vT2FwQgFga4eP6onq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度百科&lt;/a&gt;&lt;br&gt;[3] &lt;a href=&quot;https://www.coursera.org/learn/machine-learning&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机器学习&lt;/a&gt;&lt;br&gt;[4] 模式分类&lt;br&gt;[5] &lt;a href=&quot;http://blog.jobbole.com/77620/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机器学习常见分类&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;　　在介绍机器学习之前，我想先列几个关于机器学习的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垃圾邮件检测：根据邮箱中的邮件，识别哪些是垃圾邮件，哪些不是。这样的模型，可以程序帮助归类垃圾邮件和非垃圾邮件。这个例子，我们应该都不陌生。&lt;/li&gt;
&lt;li&gt;信用卡欺诈检测：根据用户一个月内的信用卡交易，识别哪些交易是该用户操作的，哪些不是。这样的决策模型，可以帮助程序退还那些欺诈交易。&lt;/li&gt;
&lt;li&gt;数字识别：根据信封上手写的邮编，识别出每一个手写字符所代表的数字。这样的模型，可以帮助程序阅读和理解手写邮编，并根据地利位置分类信件。&lt;/li&gt;
&lt;li&gt;语音识别：从一个用户的话语，确定用户提出的具体要求。这样的模型，可以帮助程序能够并尝试自动填充用户需求。带有Siri系统的iPhone就有这种功能。&lt;/li&gt;
&lt;li&gt;人脸识别：根据相册中的众多数码照片，识别出那些包含某一个人的照片。这样的决策模型，可以帮助程序根据人脸管理照片。某些相机或软件，如iPhoto，就有这种功能。&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7cc829d3gw1eebxsvbwnhj20hc0d2jt6.jpg&quot; alt=&quot;人脸识别&quot;&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>opencv基本绘图</title>
    <link href="http://yoursite.com/2016/05/04/opencv%E5%9F%BA%E6%9C%AC%E7%BB%98%E5%9B%BE/"/>
    <id>http://yoursite.com/2016/05/04/opencv基本绘图/</id>
    <published>2016-05-04T12:13:39.000Z</published>
    <updated>2016-05-04T12:28:07.002Z</updated>
    
    <content type="html">&lt;p&gt;基本绘图功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 Point 在图像中定义 2D 点&lt;/li&gt;
&lt;li&gt;用OpenCV的函数 line 绘 直线&lt;/li&gt;
&lt;li&gt;用OpenCV的函数 ellipse 绘 椭圆&lt;/li&gt;
&lt;li&gt;用OpenCV的函数 rectangle 绘 矩形&lt;/li&gt;
&lt;li&gt;用OpenCV的函数 circle 绘 圆&lt;/li&gt;
&lt;li&gt;用OpenCV的函数 fillPoly 绘 填充的多边形&lt;br&gt;详细解释，参考&lt;a href=&quot;http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/core/basic_geometric_drawing/basic_geometric_drawing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;opencv中文网址&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
下面代码是opencv自带的绘图功能的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @file Drawing.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @brief Simple sample code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;opencv2/core/core.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;opencv2/highgui/highgui.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; w 400&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; cv;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// Function headers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyEllipse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( Mat img, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; angle )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyFilledCircle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( Mat img, Point center )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyPolygon&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( Mat img )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyLine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( Mat img, Point start, Point end )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @function main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @brief Main function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv )&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// Windows names&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; atom_window[] = &lt;span class=&quot;string&quot;&gt;&quot;Drawing 1: Atom&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; rook_window[] = &lt;span class=&quot;string&quot;&gt;&quot;Drawing 2: Rook&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// Create black empty images &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Mat atom_image = Mat::zeros( w, w, CV_8UC3 );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Mat rook_image = Mat::zeros( w, w, CV_8UC3 );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 1. Draw a simple atom:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// -----------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 1.a. Creating ellipses &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyEllipse( atom_image, &lt;span class=&quot;number&quot;&gt;90&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyEllipse( atom_image, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyEllipse( atom_image, &lt;span class=&quot;number&quot;&gt;45&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyEllipse( atom_image, &lt;span class=&quot;number&quot;&gt;-45&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 1.b. Creating circles&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyFilledCircle( atom_image, Point( w/&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 2. Draw a rook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// ------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 2.a. Create a convex polygon&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyPolygon( rook_image );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 2.b. Creating rectangles&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rectangle( rook_image,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	     Point( &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	     Point( w, w),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	     Scalar( &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 2.c. Create a few lines &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyLine( rook_image, Point( &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; ), Point( w, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; ) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyLine( rook_image, Point( w/&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; ), Point( w/&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, w ) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyLine( rook_image, Point( w/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; ), Point( w/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, w ) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyLine( rook_image, Point( &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; ), Point( &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, w ) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 3. Display your stuff!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  imshow( atom_window, atom_image );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvMoveWindow( atom_window, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  imshow( rook_window, rook_image );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvMoveWindow( rook_window, w, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  waitKey( &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// Function Declaration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @function MyEllipse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @brief Draw a fixed-size ellipse with different angles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyEllipse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( Mat img, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; angle )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; thickness = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lineType = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ellipse( img,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   Point( w/&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   Size( w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;16.0&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   angle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   &lt;span class=&quot;number&quot;&gt;360&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   Scalar( &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   thickness,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   lineType );  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @function MyFilledCircle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @brief Draw a fixed-size filled circle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyFilledCircle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( Mat img, Point center )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; thickness = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lineType = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  circle( img, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  center,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  w/&lt;span class=&quot;number&quot;&gt;32.0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  Scalar( &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  thickness, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  lineType );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @function MyPolygon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @function Draw a simple concave polygon (rook)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyPolygon&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( Mat img )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lineType = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/** Create some points */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Point rook_points[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = Point( w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;16.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;16.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;16.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;32.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;40.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;40.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;40.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;40.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;40.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;40.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;40.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;40.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;] = Point( w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;, w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;] = Point( w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;32.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;] = Point( &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;16.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;16.0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;] = Point( w/&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;*w/&lt;span class=&quot;number&quot;&gt;16.0&lt;/span&gt;) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Point* ppt[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &amp;#123; rook_points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; npt[] = &amp;#123; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fillPoly( img,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ppt,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    npt,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Scalar( &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    lineType );			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @function MyLine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @brief Draw a simple line&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyLine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( Mat img, Point start, Point end )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; thickness = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lineType = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  line( img, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	start,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	end,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Scalar( &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	thickness,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	lineType );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;基本绘图功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 Point 在图像中定义 2D 点&lt;/li&gt;
&lt;li&gt;用OpenCV的函数 line 绘 直线&lt;/li&gt;
&lt;li&gt;用OpenCV的函数 ellipse 绘 椭圆&lt;/li&gt;
&lt;li&gt;用OpenCV的函数 rectangle 绘 矩形&lt;/li&gt;
&lt;li&gt;用OpenCV的函数 circle 绘 圆&lt;/li&gt;
&lt;li&gt;用OpenCV的函数 fillPoly 绘 填充的多边形&lt;br&gt;详细解释，参考&lt;a href=&quot;http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/core/basic_geometric_drawing/basic_geometric_drawing.html&quot;&gt;opencv中文网址&lt;/a&gt;
    
    </summary>
    
      <category term="opencv" scheme="http://yoursite.com/categories/opencv/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
      <category term="机器视觉" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>opencv矩阵和图像操作</title>
    <link href="http://yoursite.com/2016/05/04/opencv%E7%9F%A9%E9%98%B5%E5%92%8C%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/05/04/opencv矩阵和图像操作/</id>
    <published>2016-05-04T11:49:50.000Z</published>
    <updated>2016-05-05T02:54:51.031Z</updated>
    
    <content type="html">&lt;p&gt;表列出了一些操作矩阵图像的函数，其中的大部分对于图像处理非常有效。它们实现了图像处理中的基本操作，例如对角化、矩阵变换以及一些更复杂的诸如计算图像的统计操作表：矩阵和图像基本操作&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;函数名称&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvAbs&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算数组中所有元素的绝对值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvAbsDiff&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算两个数组差值的绝对值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvAbsDiffS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算数组和标量差值的绝对值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvAdd&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;两个数组的元素级的加运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvAddS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;一个数组和一个标量的元素级的相加运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvAddWeighted&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;两个数组的元素级的加权相加运算(alpha融合)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvAvg&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算数组中所有元素的平均值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvAvgSdv&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算数组中所有元素的绝对值和标准差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvCalcCovarMatrix&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算一组n维空间向量的协方差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvCmp&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;对两个数组中的所有元素运用设置的比较操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvCmpS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;对数组和标量运用设置的比较操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvConvertScale&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;用可选的缩放值转换数组元素类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvConvertScaleAbs&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算可选的缩放值的绝对值之后再转换数组元素的类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvCopy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;把数组中的值复制到另一个数组中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvCountNonZero&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算数组中非0值的个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvCrossProduct&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算两个三维向量的向量积(叉积)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvCvtColor&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;将数组的通道从一个颜色空间转换另外一个颜色空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvDet&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算方阵的行列式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvDiv&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;用另外一个数组对一个数组进行元素级的除法运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvDotProduct&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算两个向量的点积&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvEigenVV&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算方阵的特征值和特征向量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvFlip&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;围绕选定轴翻转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvGEMM&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;矩阵乘法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvGetCol&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从一个数组的列中复制元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvGetCols&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从数据的相邻的多列中复制元素值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvGetDiag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;复制数组中对角线上的所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvGetDims&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;返回数组的维数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvGetDimSize&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;返回一个数组的所有维的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvGetRow&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从一个数组的行中复制元素值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvGetRows&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从一个数组的多个相邻的行中复制元素值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvGetSize&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;得到二维的数组的尺寸，以CvSize返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvGetSubRect&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从一个数组的子区域复制元素值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvInRange&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;检查一个数组的元素是否在另外两个数组中的值的范围内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvInRangeS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;检查一个数组的元素的值是否在另外两个标量的范围内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvInvert&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;求矩阵的转置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvMahalonobis&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算两个向量间的马氏距离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvMax&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;在两个数组中进行元素级的取最大值操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvMaxS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;在一个数组和一个标量中进行元素级的取最大值操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvMerge&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;把几个单通道图像合并为一个多通道图像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvMin&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;在两个数组中进行元素级的取最小值操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvMinS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;在一个数组和一个标量中进行元素级的取最小值操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvMinMaxLoc&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;寻找数组中的最大最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvMul&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算两个数组的元素级的乘积&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvNot&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;按位对数组中的每一个元素求反&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvNorm&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算两个数组的正态相关性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvNormalize&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;将数组中元素进行规一化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvOr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;对两个数组进行按位或操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvOrS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;在数组与标量之间进行按位或操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvReduce&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;通过给定的操作符将二维数组约简为向量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvRepeat&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;以平铺的方式进行数组复制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSet&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;用给定值初始化数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSetZero&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;将数组中所有元素初始化为0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSetIdentity&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;将数组中对角线上的元素设为1，其他置0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;求出线性方程组的解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSplit&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;将多通道所组分割成多个单通道数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSub&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;两个数组元素级的相减&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSubS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;元素级的从数组中减去标量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSubRS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;元素级的从标量中减去数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSum&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;对数组中的所有元素求和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSVD&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;二维矩阵的奇异值分解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvSVBkSb&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;奇异值回代计算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvTrace&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;计算矩阵迹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvTranspose&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;矩阵的转置运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvXor&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;对两个数组进行按位异或操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvXorS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;在数组和标量之间进行按位异或操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cvZero&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;将所有数组中的元素置为0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;有很多函数有mask，代表掩码，如果某位mask是0,那么对应的src的那一位就不计算，mask要和矩阵/ROI/的大小相等&lt;br&gt;大多数函数支持ROI，如果图像ROI被设置，那么只处理ROI部分&lt;br&gt;少部分函数支持COI，如果COI设置，只处理感兴趣的通道&lt;/p&gt;
&lt;h1 id=&quot;矩阵逻辑运算&quot;&gt;&lt;a href=&quot;#矩阵逻辑运算&quot; class=&quot;headerlink&quot; title=&quot;矩阵逻辑运算&quot;&gt;&lt;/a&gt;矩阵逻辑运算&lt;/h1&gt;&lt;p&gt;void cvAnd(const CvArr&lt;em&gt; src1, const CvArr&lt;/em&gt; src2, CvArr&lt;em&gt; dst, const CvArr&lt;/em&gt; mask=NULL);//&lt;br&gt;void cvAndS(const CvArr&lt;em&gt; src, CvScalar value, CvArr&lt;/em&gt; dst, const CvArr&lt;em&gt; mask=NULL);//&lt;br&gt;void cvOr(const CvArr&lt;/em&gt; src1, const CvArr&lt;em&gt; src2, CvArr&lt;/em&gt; dst, const CvArr&lt;em&gt; mask=NULL);//&lt;br&gt;void cvOrS(const CvArr&lt;/em&gt; src, CvScalar value, CvArr&lt;em&gt; dst, const CvArr&lt;/em&gt; mask=NULL);//&lt;br&gt;void cvXor(const CvArr&lt;em&gt; src1, const CvArr&lt;/em&gt; src2, CvArr&lt;em&gt; dst, const CvArr&lt;/em&gt; mask=NULL);//&lt;br&gt;void cvXorS(const CvArr&lt;em&gt; src, CvScalar value, CvArr&lt;/em&gt; dst, const CvArr&lt;em&gt; mask=NULL);//&lt;br&gt;void cvNot(const CvArr&lt;/em&gt; src,CvArr* dst);//矩阵取反&lt;/p&gt;
&lt;h1 id=&quot;矩阵算术运算&quot;&gt;&lt;a href=&quot;#矩阵算术运算&quot; class=&quot;headerlink&quot; title=&quot;矩阵算术运算&quot;&gt;&lt;/a&gt;矩阵算术运算&lt;/h1&gt;&lt;h2 id=&quot;绝对值&quot;&gt;&lt;a href=&quot;#绝对值&quot; class=&quot;headerlink&quot; title=&quot;绝对值&quot;&gt;&lt;/a&gt;绝对值&lt;/h2&gt;&lt;p&gt;void cvAbs(const CvArr&lt;em&gt; src,CvArr&lt;/em&gt; dst);&lt;br&gt;void cvAbsDiff(const CvArr&lt;em&gt; src1,const CvArr&lt;/em&gt; src2, CvArr&lt;em&gt; dst);//两矩阵相减取绝对值&lt;br&gt;void cvAbsDiffS(const CvArr&lt;/em&gt; src, CvArr* dst,CvScalar value);//矩阵减去一个数取绝对值 &lt;/p&gt;
&lt;h2 id=&quot;加减&quot;&gt;&lt;a href=&quot;#加减&quot; class=&quot;headerlink&quot; title=&quot;加减&quot;&gt;&lt;/a&gt;加减&lt;/h2&gt;&lt;p&gt;void cvAdd(const CvArr&lt;em&gt; src1,const CvArr&lt;/em&gt; src2,CvArr&lt;em&gt; dst,const CvArr&lt;/em&gt; mask = NULL);//两数组相加，dst(I)=src1(I)+src2(I) if mask(I)!=0&lt;br&gt;void cvAddS(const CvArr&lt;em&gt; src,CvScalar value,CvArr&lt;/em&gt;dst,const CvArr&lt;em&gt; mask = NULL);//数组和一个数相加，dst(I)=src(I)+value if mask(I)!=0&lt;br&gt;void cvAddWeighted(const CvArr&lt;/em&gt; src1,double alpha,const CvArr&lt;em&gt; src2,double beta,double gamma,CvArradded to each sum&lt;/em&gt; dst);//带权相加相当于dst(x,y) = α ? src1(x,y) + β ? src2(x,y) + γ&lt;br&gt;void cvSub(const CvArr&lt;em&gt; src1, const CvArr&lt;/em&gt; src2, CvArr&lt;em&gt; dst, const CvArr&lt;/em&gt; mask=NULL);//矩阵减法，dst(I)=src1(I)-src2(I) if mask(I)!=0&lt;br&gt;void cvSubS(const CvArr&lt;em&gt; src, CvScalar value, CvArr&lt;/em&gt; dst, const CvArr&lt;em&gt; mask=NULL);//矩阵减数，dst(I)=src(I)-value if mask(I)!=0&lt;br&gt;void cvSubRS(const CvArr&lt;/em&gt; src, CvScalar value, CvArr&lt;em&gt; dst, const CvArr&lt;/em&gt; mask=NULL);//数减矩阵，dst(I)=value-src(I) if mask(I)!=0&lt;br&gt;乘除&lt;br&gt;void cvDiv(const CvArr&lt;em&gt; src1, const CvArr&lt;/em&gt; src2, CvArr&lt;em&gt; dst, double scale=1);//scale&lt;/em&gt;src1(i)/src2(i)，如果src1=NULL，则计算scale/src2(i)&lt;br&gt;void cvMul(const CvArr&lt;em&gt; src1,const CvArr&lt;/em&gt; src2,CvArr&lt;em&gt; dst,double scale=1);//两矩阵元素之间的简单乘法，一般的矩阵点乘用cvGEMM();&lt;br&gt;次方&lt;br&gt;void cvPow(const CvArr&lt;/em&gt; src, CvArr&lt;em&gt; dst, double power);//为每个src的数求power次方&lt;br&gt;指数&lt;br&gt;void cvExp(const CvArr&lt;/em&gt; src, CvArr&lt;em&gt; dst);//dst(I)=EXP(src(I))&lt;br&gt;对数&lt;br&gt;void cvLog(const CvArr&lt;/em&gt; src, CvArr* dst);//&lt;/p&gt;
&lt;h1 id=&quot;线性代数计算&quot;&gt;&lt;a href=&quot;#线性代数计算&quot; class=&quot;headerlink&quot; title=&quot;线性代数计算&quot;&gt;&lt;/a&gt;线性代数计算&lt;/h1&gt;&lt;h2 id=&quot;加-amp-乘&quot;&gt;&lt;a href=&quot;#加-amp-乘&quot; class=&quot;headerlink&quot; title=&quot;加&amp;amp;乘&quot;&gt;&lt;/a&gt;加&amp;amp;乘&lt;/h2&gt;&lt;p&gt;void cvScaleAdd(const CvArr&lt;em&gt; src1, CvScalar scale, const CvArr&lt;/em&gt; src2, CvArr&lt;em&gt; dst);//src1和scale的乘积加上src2&lt;br&gt;void cvCrossProduct(const CvArr&lt;/em&gt; src1,const CvArr&lt;em&gt; src2,CvArr&lt;/em&gt; dst);//计算两个3D向量（单通道）的叉乘运算&lt;br&gt;double cvDotProduct(const CvArr&lt;em&gt; src1, const CvArr&lt;/em&gt; src2);//两个向量点乘&lt;br&gt;void cvGEMM(const CvArr&lt;em&gt; src1, const CvArr&lt;/em&gt; src2, double alpha, const CvArr&lt;em&gt; src3, double beta, CvArr&lt;/em&gt; dst, int tABC=0);//乘加运算的始祖&lt;br&gt;    由通用乘加函数参与定义的两个具体宏&lt;br&gt;        cvMatMul(const CvArr&lt;em&gt; src1,const CvArr&lt;/em&gt; src2,CvArr&lt;em&gt; dst);&lt;br&gt;        cvMatMulAdd(const CvArr&lt;/em&gt; src1,const CvArr&lt;em&gt; src2,const CvArr&lt;/em&gt; src3,CvArr&lt;em&gt; dst);&lt;br&gt;CvScalar cvTrace(const CvArr&lt;/em&gt; mat);//计算对角线上的元素和&lt;br&gt;变换&lt;br&gt;void cvTransform(const CvArr&lt;em&gt; src, CvArr&lt;/em&gt; dst, const CvMat&lt;em&gt; transmat, const CvMat&lt;/em&gt; shiftvec=NULL);//dst=transmat · src + shiftvec&lt;br&gt;void cvPerspectiveTransform(const CvArr&lt;em&gt; src, CvArr&lt;/em&gt; dst, const CvMat* mat);//把矩阵每个元素中三个通道当做一个矩阵，乘mat，mat是一个3×3或者4×4的转换矩阵 &lt;/p&gt;
&lt;h2 id=&quot;转置&quot;&gt;&lt;a href=&quot;#转置&quot; class=&quot;headerlink&quot; title=&quot;转置&quot;&gt;&lt;/a&gt;转置&lt;/h2&gt;&lt;p&gt;void cvTranspose(const CvArr&lt;em&gt; src, CvArr&lt;/em&gt; dst);&lt;br&gt;void cvMulTransposed(const CvArr&lt;em&gt; src, CvArr&lt;/em&gt; dst, int order, const CvArr* delta=NULL, double scale=1.0);//(src-delta)乘以它的转置再乘以scale &lt;/p&gt;
&lt;h2 id=&quot;逆矩阵&quot;&gt;&lt;a href=&quot;#逆矩阵&quot; class=&quot;headerlink&quot; title=&quot;逆矩阵&quot;&gt;&lt;/a&gt;逆矩阵&lt;/h2&gt;&lt;p&gt;double cvInvert(const CvArr&lt;em&gt; src,CvArr&lt;/em&gt; dst,int method=CV_LU);//求原矩阵的逆矩阵，默认使用高斯消去法&lt;br&gt;    方阵可逆的充要条件是|A|!=0&lt;br&gt;    method取值为CV_LU高斯消去法（默认）    CV_SVD 奇异值分解SVD    CV_SVD_SYM对称矩阵的SVD &lt;/p&gt;
&lt;h2 id=&quot;行列式&quot;&gt;&lt;a href=&quot;#行列式&quot; class=&quot;headerlink&quot; title=&quot;行列式&quot;&gt;&lt;/a&gt;行列式&lt;/h2&gt;&lt;p&gt;double cvDet(const CvArr* mat);//计算方阵行列式，一定是单通道的&lt;br&gt;    小型方阵直接计算，大型方阵用高斯消去法计算&lt;br&gt;    如果矩阵正定对称，用奇异值分解的方法解决cvSVD(); &lt;/p&gt;
&lt;h2 id=&quot;特征向量特征值&quot;&gt;&lt;a href=&quot;#特征向量特征值&quot; class=&quot;headerlink&quot; title=&quot;特征向量特征值&quot;&gt;&lt;/a&gt;特征向量特征值&lt;/h2&gt;&lt;p&gt;void cvEigenVV(CvArr&lt;em&gt; mat, CvArr&lt;/em&gt; evects, CvArr* evals, double eps=0);//计算对称矩阵的特征值和特征向量，evects输出特征向量，evals输出特征值，eps雅可比方法停止参数&lt;br&gt;    要求三个矩阵都是浮点类型，10×10以下该方法有效，20×20以上的矩阵不能计算出结果，为节约计算量，eps通常设为DBL_EPSILON(10^-15)&lt;br&gt;    如果给定的矩阵是对称正定矩阵，那么考虑使用cvSVD(); &lt;/p&gt;
&lt;h2 id=&quot;协方差&quot;&gt;&lt;a href=&quot;#协方差&quot; class=&quot;headerlink&quot; title=&quot;协方差&quot;&gt;&lt;/a&gt;协方差&lt;/h2&gt;&lt;p&gt;void cvCalcCovarMatrix(const CvArr&lt;em&gt;* vects, int count, CvArr&lt;/em&gt; cov_mat, CvArr&lt;em&gt; avg, int flags);//给定一组大小和类型相同的向量，向量的个数，计算标记，输出协方差正阵和每个向量的平均值矩阵&lt;br&gt;    CV_COVAR_NORMAL    普通计算协方差和平均值，输出的是n×n的协方差阵&lt;br&gt;    CV_COVAR_SCRAMBLED    快速PCA“Scrambled”协方差，输出的是m×m的协方差阵&lt;br&gt;    CV_COVAR_USE_AVERAGE    平均值是输入的&lt;br&gt;    CV_COVAR_SCALE    重新缩放输出的协方差矩阵&lt;br&gt;        四个flag通过并运算协同发挥作用，前两个不能并&lt;br&gt;CvSize cvMahalonobis(const CvArr&lt;/em&gt; vec1,const CvArr&lt;em&gt; vec2,CvArr&lt;/em&gt; mat);&lt;br&gt;int cvSolve(const CvArr&lt;em&gt; src1, const CvArr&lt;/em&gt; src2, CvArr&lt;em&gt; dst, int method=CV_LU);//Solves a linear system or least-squares problem.&lt;br&gt;void cvSVD(CvArr&lt;/em&gt; A, CvArr&lt;em&gt; W, CvArr&lt;/em&gt; U=NULL, CvArr&lt;em&gt; V=NULL, int flags=0);//Performs singular value decomposition of a real floating-point matrix.&lt;br&gt;void cvSVBkSb(const CvArr&lt;/em&gt; W, const CvArr&lt;em&gt; U, const CvArr&lt;/em&gt; V, const CvArr&lt;em&gt; B, CvArr&lt;/em&gt; X, int flags);//Performs singular value back substitution.&lt;/p&gt;
&lt;h1 id=&quot;数组比较&quot;&gt;&lt;a href=&quot;#数组比较&quot; class=&quot;headerlink&quot; title=&quot;数组比较&quot;&gt;&lt;/a&gt;数组比较&lt;/h1&gt;&lt;p&gt;void cvCmp(const CvArr&lt;em&gt; src1, const CvArr&lt;/em&gt; src2, CvArr&lt;em&gt; dst, int cmp_op);//两矩阵比较运算&lt;br&gt;    CV_CMP_EQ - src1(I) 是否相等&lt;br&gt;    CV_CMP_GT - src1(I) 是否大于&lt;br&gt;    CV_CMP_GE - src1(I) 是否大于等于&lt;br&gt;    CV_CMP_LT - src1(I) 是否小于&lt;br&gt;    CV_CMP_LE - src1(I) 是否小于等于&lt;br&gt;    CV_CMP_NE - src1(I) 是否不等&lt;br&gt;        如果判断为假，dst设为0，如果判断为真，dst设为0xff&lt;br&gt;void cvCmpS(const CvArr&lt;/em&gt; src, double value, CvArr* dst, int cmp_op);//矩阵和一个数字比较运算&lt;/p&gt;
&lt;h1 id=&quot;矩阵内转换&quot;&gt;&lt;a href=&quot;#矩阵内转换&quot; class=&quot;headerlink&quot; title=&quot;矩阵内转换&quot;&gt;&lt;/a&gt;矩阵内转换&lt;/h1&gt;&lt;h2 id=&quot;类型转换&quot;&gt;&lt;a href=&quot;#类型转换&quot; class=&quot;headerlink&quot; title=&quot;类型转换&quot;&gt;&lt;/a&gt;类型转换&lt;/h2&gt;&lt;p&gt;void cvConvertScale(const CvArr&lt;em&gt; src,CvArr&lt;/em&gt; dst,double scale,double shift);//矩阵首先乘以scale再加上shift，然后把src中的数据类型转换成dst类型，但是src和dst通道数需要相等&lt;br&gt;void cvConvertScaleAbs(const CvArr&lt;em&gt; src,CvArr&lt;/em&gt; dst,double scale,double shift);//在src到dst类型转换前，先做绝对值&lt;br&gt;void cvCvtColor(const CvArr&lt;em&gt; src,CvArr&lt;/em&gt; dst, int code);//图像 颜色空间转换，src要为8U 16U 32F，dst的数据类型需要和src相同，通道数看code&lt;br&gt;    code格式如：CV_原色彩空间2目的色彩空间    色彩空间要考虑RGB的顺序&lt;br&gt;    支持的颜色空间包括：RGB    RGB565    RGB555    GRAY RGBA    XYZ    YCrCb    HSV    HLS    Luv    BayerRG &lt;/p&gt;
&lt;h2 id=&quot;空间转换&quot;&gt;&lt;a href=&quot;#空间转换&quot; class=&quot;headerlink&quot; title=&quot;空间转换&quot;&gt;&lt;/a&gt;空间转换&lt;/h2&gt;&lt;p&gt;void cvFlip(const CvArr&lt;em&gt; src, CvArr&lt;/em&gt; dst=NULL, int flip_mode=0);//图像绕x、y轴旋转。当用在一维数组上时并且flip_mode&amp;gt;0，可以用来颠倒数据排列&lt;br&gt;    flip_mode=0：左右对称values of the conversion resul&lt;br&gt;    flip_mode&amp;gt;0：上下对称&lt;br&gt;    flip_mode&amp;lt;0：中心对称&lt;/p&gt;
&lt;h1 id=&quot;矩阵间操作&quot;&gt;&lt;a href=&quot;#矩阵间操作&quot; class=&quot;headerlink&quot; title=&quot;矩阵间操作&quot;&gt;&lt;/a&gt;矩阵间操作&lt;/h1&gt;&lt;p&gt;void cvCopy(const CvArr&lt;em&gt; src,CvArr&lt;/em&gt; dst,const CvArr&lt;em&gt; mask=NULL);&lt;br&gt;void cvMerge(const CvArr&lt;/em&gt; src0,const CvArr&lt;em&gt; src1,const CvArr&lt;/em&gt; src2,const CvArr&lt;em&gt; src3,CvArr&lt;/em&gt; dst);//多个数组合并成一个，类型和尺寸都相同，dst有多个通道，src可以赋值NULL&lt;br&gt;void cvSplit(cosnt CvArr&lt;em&gt; src,CvArr&lt;/em&gt; dst0,CvArr&lt;em&gt; dst1,CvArr&lt;/em&gt; dst2,CvArr&lt;em&gt; dst3);//一个多通道数组分解成多个数组，类型尺寸都想同，dst可以赋值NULL&lt;br&gt;void cvRepeat(const CvArr&lt;/em&gt; src, CvArr&lt;em&gt; dst);//在dst中重复叠加src，dst(i,j)=src(i mod rows(src), j mod cols(src))&lt;br&gt;CvMat&lt;/em&gt; cvReshape(const CvArr&lt;em&gt; originalarr, CvMat&lt;/em&gt; headerdata, int new_cn, int new_rows=0);//把一个originalarr（可以是已经有内容的图片），转换为有新的通道数、新的行数的数据（CvMat&lt;em&gt;只含数据，没有图片头）&lt;br&gt;CvArr&lt;/em&gt; cvReshapeMatND(const CvArr&lt;em&gt; arr, int sizeof_header, CvArr&lt;/em&gt; header, int new_cn, int new_dims, int&lt;em&gt; new_sizes);&lt;br&gt;void cvLUT(const CvArr&lt;/em&gt; src, CvArr&lt;em&gt; dst, const CvArr&lt;/em&gt; lut);//src是8bit类型的数据，lut是一张一维查找表，拥有256个通道数类型和dst相同的元素，src的某一位置的元素数值n，到lut的n位置查找的内容填入dst的相应src的n元素的位置&lt;/p&gt;
&lt;h1 id=&quot;统计运算&quot;&gt;&lt;a href=&quot;#统计运算&quot; class=&quot;headerlink&quot; title=&quot;统计运算&quot;&gt;&lt;/a&gt;统计运算&lt;/h1&gt;&lt;h2 id=&quot;最大最小&quot;&gt;&lt;a href=&quot;#最大最小&quot; class=&quot;headerlink&quot; title=&quot;最大最小&quot;&gt;&lt;/a&gt;最大最小&lt;/h2&gt;&lt;p&gt;void cvMax(const CvArr&lt;em&gt; src1, const CvArr&lt;/em&gt; src2, CvArr&lt;em&gt; dst);&lt;br&gt;void cvMaxS(const CvArr&lt;/em&gt; src, double value, CvArr&lt;em&gt; dst);//找较大值放到dst中&lt;br&gt;void cvMin(const CvArr&lt;/em&gt; src1,const CvArr&lt;em&gt; src2,CvArr&lt;/em&gt; dst);&lt;br&gt;void cvMins(const CvArr&lt;em&gt; src,double value,CvArr&lt;/em&gt; dst);//找较小值放到dst中&lt;br&gt;void cvMinMaxLoc(const CvArr&lt;em&gt; arr, double&lt;/em&gt; min_val, double&lt;em&gt; max_val, CvPoint&lt;/em&gt; min_loc=NULL, CvPoint&lt;em&gt; max_loc=NULL, const CvArr&lt;/em&gt; mask=NULL);&lt;br&gt;    找出全局某个通道中最大最小的值，和她们的位置，如果不止一个通道，一定要设置COI&lt;br&gt;零的个数&lt;br&gt;int cvCountNonZero( const CvArr&lt;em&gt; arr );//统计非零的个数&lt;br&gt;是否落在范围内&lt;br&gt;void cvInRange(const CvArr&lt;/em&gt; src,const CvArr&lt;em&gt; lower,const CvArr&lt;/em&gt; upper,CvArr&lt;em&gt; dst);&lt;br&gt;void cvInRangeS(const CvArr&lt;/em&gt; src,CvScalar lower,CvScalar upper,CvArr* dst);//判断原数组中的每个数大小是否落在对应的lower、upper数组位置数值的中间&lt;br&gt;    if( lower(i)&amp;lt;=src(i) &lt;/p&gt;
&lt;h2 id=&quot;平均值标准差&quot;&gt;&lt;a href=&quot;#平均值标准差&quot; class=&quot;headerlink&quot; title=&quot;平均值标准差&quot;&gt;&lt;/a&gt;平均值标准差&lt;/h2&gt;&lt;p&gt;CvScalar cvAvg(const CvArr&lt;em&gt; arr,const CvArr&lt;/em&gt; mask = NULL);//计算mask非零位置的所有元素的平均值，如果是图片，则单独计算每个通道上的平均值，如果COI设置了，只计算该COI通道的平均值&lt;br&gt;void cvAvgSdv(const CvArr&lt;em&gt; arr, CvScalar&lt;/em&gt; mean, CvScalar&lt;em&gt; std_dev, const CvArr&lt;/em&gt; mask=NULL);//计算各通道的平均值，标准差，支持COI&lt;/p&gt;
&lt;p&gt;double cvNorm(const CvArr&lt;em&gt; arr1,const CvArr&lt;/em&gt; arr2=NULL,int norm_type=CV_L2,const CvArr&lt;em&gt; mask=NULL);//计算一个数组的各种范数&lt;br&gt;    如果arr2为NULL，norm_type为&lt;br&gt;        CV_C 求所有数取绝对值后的最大值，CV_L1 求所有数的绝对值的和，CV_L2求所有数的平方和的平方根&lt;br&gt;    如果arr2不为NULL，norm_type为&lt;br&gt;        CV_C arr1和arr2对应元素差的绝对值中的最大值    CV_L1 arr1和arr2对应元素差的绝对值的和    CV_L2 arr1和arr2的差平方和的平方根&lt;br&gt;        CV_RELATIVE_C    CV_RELATIVE_L1    CV_RELATIVE_L2 上面结果除以cvNorm(arr2,NULL,对应的norm_type);&lt;br&gt;cvNormalize(const CvArr&lt;/em&gt; src,CvArr&lt;em&gt; dst,double a=1.0,double b=0.0,int norm_type=CV_L2,const CvArr&lt;/em&gt; mask=NULL);&lt;br&gt;    CV_C    CV_L1    CV_L2    CV_MINMAX&lt;br&gt;cvReduce(const CvArr&lt;em&gt; src,CvArr&lt;/em&gt; dst,int dim,int op=CV_REDUCE_SUM);//根据一定规则，把矩阵约简为向量&lt;br&gt;    dim    决定约简到行还是列    1:约简到单个列，0:约简到单个行，-1:根据dst的CvSize，决定约简到行还是列&lt;br&gt;    op    决定按什么规则约简&lt;br&gt;        CV_REDUCE_SUM - 行/列的和&lt;br&gt;        CV_REDUCE_AVG  -    行/列平均值&lt;br&gt;        CV_REDUCE_MAX - 行/列中最大值&lt;br&gt;        CV_REDUCE_MIN  -    行/列中最小值&lt;/p&gt;
&lt;h1 id=&quot;取得设置数组信息&quot;&gt;&lt;a href=&quot;#取得设置数组信息&quot; class=&quot;headerlink&quot; title=&quot;取得设置数组信息&quot;&gt;&lt;/a&gt;取得设置数组信息&lt;/h1&gt;&lt;h2 id=&quot;得到指定行列&quot;&gt;&lt;a href=&quot;#得到指定行列&quot; class=&quot;headerlink&quot; title=&quot;得到指定行列&quot;&gt;&lt;/a&gt;得到指定行列&lt;/h2&gt;&lt;p&gt;CvMat&lt;em&gt; cvGetCol(const CvArr&lt;/em&gt; arr,CvMat&lt;em&gt; submat,int col);&lt;br&gt;CvMat&lt;/em&gt; cvGetCols(const CvArr&lt;em&gt; arr,CvMat&lt;/em&gt; submat,int start_col,int end_col);//取目标矩阵的某列/连续几列，submat和返回值的实际数据还是在原矩阵中，只是修改了头部和数据指针，没有数据拷贝&lt;br&gt;CvMat&lt;em&gt; cvGetRow(const CvArr&lt;/em&gt; arr,CvMat&lt;em&gt; submat,int row);&lt;br&gt;CvMat&lt;/em&gt; cvGetRows(const CvArr&lt;em&gt; arr,CvMat&lt;/em&gt; submat,int start_row,int end_row); &lt;/p&gt;
&lt;h2 id=&quot;得到对角线&quot;&gt;&lt;a href=&quot;#得到对角线&quot; class=&quot;headerlink&quot; title=&quot;得到对角线&quot;&gt;&lt;/a&gt;得到对角线&lt;/h2&gt;&lt;p&gt;CvMat&lt;em&gt; cvGetDiag(const CvArr&lt;/em&gt; arr,CvMat* submat,int diag=0);//取矩阵arr的对角线，结果放在向量中，并不要求原矩阵是方阵，diag表示从哪个位置开始取对角线 &lt;/p&gt;
&lt;h2 id=&quot;维度大小&quot;&gt;&lt;a href=&quot;#维度大小&quot; class=&quot;headerlink&quot; title=&quot;维度大小&quot;&gt;&lt;/a&gt;维度大小&lt;/h2&gt;&lt;p&gt;int cvGetDims(const CvArr&lt;em&gt; arr,int&lt;/em&gt; sizes=NULL);//获取数组的维数和每一维的大小，sizes十一个数组的头指针。图像或者矩阵的维数一定是2，先行数后列数&lt;br&gt;int cvGetDimSize(const CvArr* arr,int index);//获取某一维的大小 &lt;/p&gt;
&lt;h2 id=&quot;矩阵大小&quot;&gt;&lt;a href=&quot;#矩阵大小&quot; class=&quot;headerlink&quot; title=&quot;矩阵大小&quot;&gt;&lt;/a&gt;矩阵大小&lt;/h2&gt;&lt;p&gt;CvSize cvGetSize(const CvArr&lt;em&gt; arr);//返回矩阵和图像的大小。小的结构体一般都是直接返回值而不是重新分配指针，分配指针的效率可能比直接返回值效率更低&lt;br&gt;截取矩形矩阵&lt;br&gt;CvMat&lt;/em&gt; cvGetSubRect(const CvArr&lt;em&gt; arr, CvMat&lt;/em&gt; submat, CvRect rect);//从输入的数组中根据输入的矩形截取一块数组中的矩形，返回的CvMat&lt;em&gt;就是submat&lt;br&gt;得到和设置元素        因为效率原因，实际很少会直接用到这些方法，而是根据实际的应用来决定如何操作每一个数&lt;br&gt;uchar&lt;/em&gt; cvPtr1D(CvArr&lt;em&gt; arr,int idx0,int&lt;/em&gt; type);//得到的是指针，所以可以修改，比下面的效率更高&lt;br&gt;uchar&lt;em&gt; cvPtr2D(CvArr&lt;/em&gt; arr,int idx0,int idx1,int&lt;em&gt; type);&lt;br&gt;uchar&lt;/em&gt; cvPtr3D(CvArr&lt;em&gt; arr,int idx0,int idx1,int idx2,int&lt;/em&gt; type);&lt;br&gt;uchar&lt;em&gt; cvPtrND(CvArr&lt;/em&gt; arr,int&lt;em&gt; idx,int&lt;/em&gt; type,int create_node=1,unsigned&lt;em&gt; precalc_hashval=NULL);//int&lt;/em&gt; idx是一个数组指针，里面保存着索引&lt;br&gt;double cvGetReal1D(const CvArr&lt;em&gt; arr,int idx0);//得到的是具体值&lt;br&gt;double cvGetReal2D(const CvArr&lt;/em&gt; arr,int idx0,int idx1);&lt;br&gt;double cvGetReal3D(const CvArr&lt;em&gt; arr,int idx0,int idx1,int idx2);&lt;br&gt;double cvGetRealND(const CvArr&lt;/em&gt; arr,int&lt;em&gt; idx);&lt;br&gt;CvScalar cvGet1D(const CvArr&lt;/em&gt; arr,int idx0);&lt;br&gt;CvScalar cvGet2D(const CvArr&lt;em&gt; arr,int idx0,int idx1);&lt;br&gt;CvScalar cvGet3D(const CvArr&lt;/em&gt; arr,int idx0,int idx1,int idx2);&lt;br&gt;CvScalar cvGetND(const CvArr&lt;em&gt; arr,int&lt;/em&gt; idx);&lt;br&gt;double cvmGet(const CvMat&lt;em&gt; mat, int row, int col);//仅仅用于矩阵单通道浮点数的获取，由于是inline并且没有类型判断，所以效率比较高&lt;br&gt;void cvSetReal1D(CvArr&lt;/em&gt; arr, int idx0, double value);&lt;br&gt;void cvSetReal2D(CvArr&lt;em&gt; arr, int idx0, int idx1, double value);&lt;br&gt;void cvSetReal3D(CvArr&lt;/em&gt; arr, int idx0, int idx1, int idx2, double value);&lt;br&gt;void cvSetRealND(CvArr&lt;em&gt; arr, int&lt;/em&gt; idx, double value);&lt;br&gt;void cvSet1D(CvArr&lt;em&gt; arr, int idx0, CvScalar value);&lt;br&gt;void cvSet2D(CvArr&lt;/em&gt; arr, int idx0, int idx1, CvScalar value);&lt;br&gt;void cvSet3D(CvArr&lt;em&gt; arr, int idx0, int idx1, int idx2, CvScalar value);&lt;br&gt;void cvSetND(CvArr&lt;/em&gt; arr, int&lt;em&gt; idx, CvScalar value);&lt;br&gt;void cvmSet(CvMat&lt;/em&gt; mat, int row, int col, double value);//仅仅用于设置单通道浮点类型的矩阵&lt;br&gt;void cvClearND(CvArr&lt;em&gt; arr, int&lt;/em&gt; idx);//把多维数组的某位置设置为0&lt;br&gt;void cvSet(CvArr&lt;em&gt; arr, CvScalar value, const CvArr&lt;/em&gt; mask=NULL);//把数组每个元素都设为value&lt;br&gt;void cvSetZero(CvArr* arr);//对普通矩阵，每位都设为0；对稀疏矩阵，删除所以元素&lt;/p&gt;
&lt;h1 id=&quot;一般算数运算&quot;&gt;&lt;a href=&quot;#一般算数运算&quot; class=&quot;headerlink&quot; title=&quot;一般算数运算&quot;&gt;&lt;/a&gt;一般算数运算&lt;/h1&gt;&lt;p&gt;int cvRound(double value ); int cvFloor( double value ); int cvCeil( double value);//求和double最（上/下）接近的整数&lt;br&gt;float cvSqrt(float value);//求平方根&lt;br&gt;float cvInvSqrt(float value);//求平方根倒数&lt;br&gt;float cvCbrt(float value);//求立方根&lt;br&gt;float cvCbrt(float value);//求两个向量的夹角&lt;br&gt;int cvIsNaN(double value);//判断是否是合法数&lt;br&gt;int cvIsInf(double value);//判断是否无穷&lt;br&gt;void cvCartToPolar(const CvArr&lt;em&gt; x, const CvArr&lt;/em&gt; y, CvArr&lt;em&gt; magnitude, CvArr&lt;/em&gt; angle=NULL, int angle_in_degrees=0);//&lt;br&gt;void cvPolarToCart(const CvArr&lt;em&gt; magnitude, const CvArr&lt;/em&gt; angle, CvArr&lt;em&gt; x, CvArr&lt;/em&gt; y, int angle_in_degrees=0);//&lt;br&gt;void cvSolveCubic(const CvArr&lt;em&gt; coeffs, CvArr&lt;/em&gt; roots);//求三次方方程解，coeffs作为三次方程的系数，可以是三元（三次方系数为1）或者四元&lt;/p&gt;
&lt;h1 id=&quot;随机数生成&quot;&gt;&lt;a href=&quot;#随机数生成&quot; class=&quot;headerlink&quot; title=&quot;随机数生成&quot;&gt;&lt;/a&gt;随机数生成&lt;/h1&gt;&lt;p&gt;CvRNG cvRNG(int64 seed=-1);//生成随机数生成器&lt;br&gt;unsigned cvRandInt(CvRNG&lt;em&gt; rng);&lt;br&gt;double cvRandReal(CvRNG&lt;/em&gt; rng);&lt;br&gt;void cvRandArr(CvRNG&lt;em&gt; rng, CvArr&lt;/em&gt; arr, int dist_type, CvScalar param1, CvScalar param2);//&lt;br&gt;    dist_type决定生成随机数组中的分布    CV_RAND_UNI均匀分布    CV_RAND_NORMAL正态/高斯分布&lt;br&gt;    param1：均匀分布中的下界（包含），正态分布中的平均值&lt;br&gt;    param2：均匀分布中的上界（不包含），正态分布中的偏差&lt;/p&gt;
&lt;h1 id=&quot;分布转换&quot;&gt;&lt;a href=&quot;#分布转换&quot; class=&quot;headerlink&quot; title=&quot;分布转换&quot;&gt;&lt;/a&gt;分布转换&lt;/h1&gt;&lt;p&gt;void cvDFT(const CvArr&lt;em&gt; src, CvArr&lt;/em&gt; dst, int flags, int nonzero_rows=0);&lt;br&gt;int cvGetOptimalDFTSize(int size0);&lt;br&gt;void cvMulSpectrums(const CvArr&lt;em&gt; src1, const CvArr&lt;/em&gt; src2, CvArr&lt;em&gt; dst, int flags);&lt;br&gt;void cvDCT(const CvArr&lt;/em&gt; src, CvArr* dst, int flags);&lt;/p&gt;
&lt;p&gt;#参考资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《学习OpenCV(中文版)》&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_74a459380102v1ki.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.sina.com.cn/s/blog_74a459380102v1ki.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;表列出了一些操作矩阵图像的函数，其中的大部分对于图像处理非常有效。它们实现了图像处理中的基本操作，例如对角化、矩阵变换以及一些更复杂的诸如计算图像的统计操作表：矩阵和图像基本操作&lt;br&gt;
    
    </summary>
    
      <category term="opencv" scheme="http://yoursite.com/categories/opencv/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
      <category term="机器视觉" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>opencv的基本数据结构</title>
    <link href="http://yoursite.com/2016/05/04/opencv%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2016/05/04/opencv的基本数据结构/</id>
    <published>2016-05-04T10:15:28.000Z</published>
    <updated>2016-05-04T11:51:45.806Z</updated>
    
    <content type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基本数据类型&lt;ul&gt;
&lt;li&gt;DataType&lt;/li&gt;
&lt;li&gt;二维点坐标&lt;/li&gt;
&lt;li&gt;三维点坐标&lt;/li&gt;
&lt;li&gt;尺寸&lt;/li&gt;
&lt;li&gt;矩形区域&lt;/li&gt;
&lt;li&gt;Matx小矩阵&lt;/li&gt;
&lt;li&gt;vec短向量&lt;/li&gt;
&lt;li&gt;Scalar_四维向量&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Mat矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IplImage, CvMat与Mat&lt;ul&gt;
&lt;li&gt;IplImage&lt;/li&gt;
&lt;li&gt;CvMat&lt;/li&gt;
&lt;li&gt;Mat&lt;/li&gt;
&lt;li&gt;CvMat, Mat, IplImage之间的互相转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ROI和widthStep&lt;ul&gt;
&lt;li&gt;ROI&lt;/li&gt;
&lt;li&gt;widthStep&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;基本数据结构&quot;&gt;&lt;a href=&quot;#基本数据结构&quot; class=&quot;headerlink&quot; title=&quot;基本数据结构&quot;&gt;&lt;/a&gt;基本数据结构&lt;/h1&gt;&lt;h2 id=&quot;DataType&quot;&gt;&lt;a href=&quot;#DataType&quot; class=&quot;headerlink&quot; title=&quot;DataType&quot;&gt;&lt;/a&gt;DataType&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;DataType&lt;/strong&gt; : 将C++数据类型转换为对应的opencv数据类型&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &amp;#123; CV_8U=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, CV_8S=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, CV_16U=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, CV_16S=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, CV_32S=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, CV_32F=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, CV_64F=&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// allocates a 30x40 floating-point matrix  // CV_32F&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Mat &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;, DataType&amp;lt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;&amp;gt;::type)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat B = Mat_&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;keyword&quot;&gt;complex&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&amp;gt; &amp;gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// the statement below will print 6, 2 /*, that is depth == CV_64F, channels == 2*/  CV_64FC2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; B.depth() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; B.channels() &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二维点坐标&quot;&gt;&lt;a href=&quot;#二维点坐标&quot; class=&quot;headerlink&quot; title=&quot;二维点坐标&quot;&gt;&lt;/a&gt;二维点坐标&lt;/h2&gt;&lt;p&gt;Point_  二维点坐标(x,y)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef Point_&amp;lt;int&amp;gt; Point2i;
typedef Point2i Point;
typedef Point_&amp;lt;float&amp;gt; Point2f;
typedef Point_&amp;lt;double&amp;gt; Point2d;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三维点坐标&quot;&gt;&lt;a href=&quot;#三维点坐标&quot; class=&quot;headerlink&quot; title=&quot;三维点坐标&quot;&gt;&lt;/a&gt;三维点坐标&lt;/h2&gt;&lt;p&gt;Point3_ 3维点坐标(x,y,z)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef Point3_&amp;lt;int&amp;gt; Point3i;
typedef Point3_&amp;lt;float&amp;gt; Point3f;
typedef Point3_&amp;lt;double&amp;gt; Point3d;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;尺寸&quot;&gt;&lt;a href=&quot;#尺寸&quot; class=&quot;headerlink&quot; title=&quot;尺寸&quot;&gt;&lt;/a&gt;尺寸&lt;/h2&gt;&lt;p&gt;Size_  尺寸(width, height)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef Size_&amp;lt;int&amp;gt; Size2i;
typedef Size2i Size;
typedef Size_&amp;lt;float&amp;gt; Size2f;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;矩形区域&quot;&gt;&lt;a href=&quot;#矩形区域&quot; class=&quot;headerlink&quot; title=&quot;矩形区域&quot;&gt;&lt;/a&gt;矩形区域&lt;/h2&gt;&lt;p&gt;Rect_  矩形区域(x,y,width,height) ，(x,y)左上角坐标, 范围[x, x + width), [y, y + height)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rect = rect ± point //矩形偏移(shifting a rectangle by a certain offset)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rect = rect ± size //改变大小(expanding or shrinking a rectangle by a certain amount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rect += point, rect -= point, rect += size, rect -= size //(augmenting operations)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rect = rect1 &amp;amp; rect2 //矩形交集(rectangle intersection)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rect = rect1 | rect2 //包含r1r2的最小矩形(minimum area rectangle containing rect2 and rect3 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rect &amp;amp;= rect1, rect |= rect1 //(and the corresponding augmenting operations)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rect == rect1, rect != rect1 //(rectangle comparison)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;RotatedRect  旋转矩形&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RotatedRect::RotatedRect(const Point2f&amp;amp; center, const Size2f&amp;amp; size, float angle)// 中心点（不是左上角坐标），尺寸，旋转角度
RotatedRect rRect = RotatedRect(Point2f(100,100), Size2f(100,50), 30);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Matx小矩阵&quot;&gt;&lt;a href=&quot;#Matx小矩阵&quot; class=&quot;headerlink&quot; title=&quot;Matx小矩阵&quot;&gt;&lt;/a&gt;Matx小矩阵&lt;/h2&gt;&lt;p&gt;Matx 小矩阵&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;template&amp;lt;typename_Tp, int m, int n&amp;gt; class Matx {...};
typedef Matx&amp;lt;float, 1, 2&amp;gt; Matx12f;
typedef Matx&amp;lt;double, 1, 2&amp;gt; Matx12d;
...
typedef Matx&amp;lt;float, 1, 6&amp;gt; Matx16f;
typedef Matx&amp;lt;double, 1, 6&amp;gt; Matx16d;
typedef Matx&amp;lt;float, 2, 1&amp;gt; Matx21f;
typedef Matx&amp;lt;double, 2, 1&amp;gt; Matx21d;
...
typedef Matx&amp;lt;float, 6, 1&amp;gt; Matx61f;
typedef Matx&amp;lt;double, 6, 1&amp;gt; Matx61d;
typedef Matx&amp;lt;float, 2, 2&amp;gt; Matx22f;
typedef Matx&amp;lt;double, 2, 2&amp;gt; Matx22d;
...
typedef Matx&amp;lt;float, 6, 6&amp;gt; Matx66f;
typedef Matx&amp;lt;double, 6, 6&amp;gt; Matx66d;

Matx33f m(1, 2, 3,
4, 5, 6,
7, 8, 9);
cout &amp;lt;&amp;lt; sum(Mat(m*m.t())) &amp;lt;&amp;lt; endl;//Matx转化为Mat
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;vec短向量&quot;&gt;&lt;a href=&quot;#vec短向量&quot; class=&quot;headerlink&quot; title=&quot;vec短向量&quot;&gt;&lt;/a&gt;vec短向量&lt;/h2&gt;&lt;p&gt;Vec  短向量，基于Matx&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;template&amp;lt;typename_Tp, int n&amp;gt; class Vec : public Matx&amp;lt;_Tp, n, 1&amp;gt; {...};
typedef Vec&amp;lt;uchar, 2&amp;gt; Vec2b;
typedef Vec&amp;lt;uchar, 3&amp;gt; Vec3b;
typedef Vec&amp;lt;uchar, 4&amp;gt; Vec4b;
typedef Vec&amp;lt;short, 2&amp;gt; Vec2s;
typedef Vec&amp;lt;short, 3&amp;gt; Vec3s;
typedef Vec&amp;lt;short, 4&amp;gt; Vec4s;
typedef Vec&amp;lt;int, 2&amp;gt; Vec2i;
typedef Vec&amp;lt;int, 3&amp;gt; Vec3i;
typedef Vec&amp;lt;int, 4&amp;gt; Vec4i;
typedef Vec&amp;lt;float, 2&amp;gt; Vec2f;
typedef Vec&amp;lt;float, 3&amp;gt; Vec3f;
typedef Vec&amp;lt;float, 4&amp;gt; Vec4f;
typedef Vec&amp;lt;float, 6&amp;gt; Vec6f;
typedef Vec&amp;lt;double, 2&amp;gt; Vec2d;
typedef Vec&amp;lt;double, 3&amp;gt; Vec3d;
typedef Vec&amp;lt;double, 4&amp;gt; Vec4d;
typedef Vec&amp;lt;double, 6&amp;gt; Vec6d;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Scalar-四维向量&quot;&gt;&lt;a href=&quot;#Scalar-四维向量&quot; class=&quot;headerlink&quot; title=&quot;Scalar_四维向量&quot;&gt;&lt;/a&gt;Scalar_四维向量&lt;/h2&gt;&lt;p&gt;Scalar_  四维向量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;template&amp;lt;typename_Tp&amp;gt; class Scalar_: public Vec&amp;lt;_Tp, 4&amp;gt; { ... };
typedef Scalar_&amp;lt;double&amp;gt; Scalar;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Range&quot;&gt;&lt;a href=&quot;#Range&quot; class=&quot;headerlink&quot; title=&quot;Range&quot;&gt;&lt;/a&gt;Range&lt;/h2&gt;&lt;p&gt;Range 范围，（start, end）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Mat m(300,300,CV32F);
Mat part = m(Range::all(), Range(20, 200)); // 相当于matlab的m(:, 20 : 199)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于自定义的函数，可以用如下方法来支持Range&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void my_function(..., const Range&amp;amp; r, ....)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　if(r == Range::all()) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　// process all the data, 使用全部数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　// process [r.start, r.end)，根据r中定义, 处理数据 start : end - 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Mat矩阵&quot;&gt;&lt;a href=&quot;#Mat矩阵&quot; class=&quot;headerlink&quot; title=&quot;Mat矩阵&quot;&gt;&lt;/a&gt;Mat矩阵&lt;/h2&gt;&lt;p&gt;Mat 矩阵结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M.data  数据区域的指针&lt;/li&gt;
&lt;li&gt;M.dims  矩阵维度&lt;/li&gt;
&lt;li&gt;M.sizes  维度&lt;/li&gt;
&lt;li&gt;M.elemSize()  每个元素占的字节空间大小，与元素类型相关，如CV_8U&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M.step[]  用来计算元素地址， M.step[i] 表示所有比i大的维度所占空间大小&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;M.step[i] &amp;gt;= M.step[i+1]*M.sizes[i+1]; //这里大于是因为数据空间可能有空白&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2-dimensional matrices are stored row-by-row&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;3-dimensional matrices are stored plane-by-plane&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;addr(M(i(0),...,i(M.dims−1))) = M.data + M.step[0] ∗ i(0)+ M.step[1] ∗ i(1)+ ... + M.step[M.dims − 1] ∗ i(M.dims−1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建数组：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// make a 7x7 complex matrix filled with 1+3j.
Mat M(7,7,CV_32FC2,Scalar(1,3));
// and now turn M to a 100x60 15-channel 8-bit matrix.
// The old content will be deallocated
M.create(100,60,CV_8UC(15));
// create a 100x100x100 8-bit array
int sz[] = {100, 100, 100};
Mat bigCube(3, sz, CV_8U, Scalar::all(0));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建特殊矩阵：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;diag
ones
zeros 
eye
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;属性相关：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rows
cols
begin
end
at
size
depth
type
elemSize
total
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;矩阵操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t
inv
mul
cross
dot
reshape
resize
reserve
push_back
pop_back
赋值相关：

clone
copyTo
convertTo
assignTo
setTo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;InputArray&lt;br&gt;OutputArray&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//Do not explicitly create InputArray, OutputArray instances&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void myAffineTransform(InputArray_src, OutputArray_dst, InputArray_m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　// get Mat headers for input arrays. This is O(1) operation,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　// unless_src and/or_m are matrix expressions.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　Mat src =_src.getMat(), m =_m.getMat();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　CV_Assert( src.type() == CV_32FC2 &amp;amp;&amp;amp; m.type() == CV_32F &amp;amp;&amp;amp; m.size() == Size(3, 2) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　// [re]create the output array so that it has the proper size and type.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　// In case of Mat it calls Mat::create, in case of STL vector it calls vector::resize.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　_dst.create(src.size(), src.type());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　Mat dst =_dst.getMat();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　for( int i = 0; i &amp;lt; src.rows; i++ )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　for( int j = 0; j &amp;lt; src.cols; j++ )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　Point2f pt = src.at&amp;lt;Point2f&amp;gt;(i, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　dst.at&amp;lt;Point2f&amp;gt;(i, j) = Point2f(m.at&amp;lt;float&amp;gt;(0, 0)*pt.x +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　m.at&amp;lt;float&amp;gt;(0, 1)*pt.y +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　m.at&amp;lt;float&amp;gt;(0, 2),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　m.at&amp;lt;float&amp;gt;(1, 0)*pt.x +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　m.at&amp;lt;float&amp;gt;(1, 1)*pt.y +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　m.at&amp;lt;float&amp;gt;(1, 2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;SparseMat 稀疏矩阵&lt;/p&gt;
&lt;p&gt;Algorithm  实现一个算法的框架&lt;/p&gt;
&lt;h1 id=&quot;IplImage-CvMat与Mat&quot;&gt;&lt;a href=&quot;#IplImage-CvMat与Mat&quot; class=&quot;headerlink&quot; title=&quot;IplImage, CvMat与Mat&quot;&gt;&lt;/a&gt;IplImage, CvMat与Mat&lt;/h1&gt;&lt;p&gt;opencv中常见的与图像操作有关的数据容器有Mat，cvMat和IplImage，这三种类型都可以代表和显示图像，但是，Mat类型侧重于计算，数学性较高，openCV对Mat类型的计算也进行了优化。而CvMat和IplImage类型更侧重于“图像”，opencv对其中的图像操作（缩放、单通道提取、图像阈值操作等）进行了优化。在opencv2.0之前，opencv是完全用C实现的，但是，IplImage类型与CvMat类型的关系类似于面向对象中的继承关系。实际上，CvMat之上还有一个更抽象的基类—-CvArr，这在源代码中会常见。如下图&lt;br&gt;!()[&lt;a href=&quot;http://img1.imgtn.bdimg.com/it/u=1843122366,167567767&amp;amp;fm=21&amp;amp;gp=0.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://img1.imgtn.bdimg.com/it/u=1843122366,167567767&amp;amp;fm=21&amp;amp;gp=0.jpg&lt;/a&gt;]&lt;/p&gt;
&lt;h2 id=&quot;IplImage&quot;&gt;&lt;a href=&quot;#IplImage&quot; class=&quot;headerlink&quot; title=&quot;IplImage&quot;&gt;&lt;/a&gt;IplImage&lt;/h2&gt;&lt;p&gt;opencv中的图像信息头，该结构体定义：  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef struct _IplImage &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int nSize;    /* IplImage大小 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int ID;    /* 版本 (=0)*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int nChannels;  /* 大多数OPENCV函数支持1,2,3 或 4 个通道 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int alphaChannel;  /* 被OpenCV忽略 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int depth;   /* 像素的位深度: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16U, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IPL_DEPTH_16S, IPL_DEPTH_32S, IPL_DEPTH_32F and IPL_DEPTH_64F 可支持 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char colorModel[4]; /* 被OpenCV忽略 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char channelSeq[4]; /* 被OpenCV忽略 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int dataOrder;      /* 0 - 交叉存取颜色通道, 1 - 分开的颜色通道. cvCreateImage只能创建交叉存取图像 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int origin;     /* 0 - 顶—左结构,1 - 底—左结构 (Windows bitmaps 风格) */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int align;     /* 图像行排列 (4 or 8). OpenCV 忽略它，使用 widthStep 代替 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int width;     /* 图像宽像素数 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int height;    /* 图像高像素数*/ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    struct _IplROI *roi;  /* 图像感兴趣区域. 当该值非空只对该区域进行处理 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    struct _IplImage *maskROI; /* 在 OpenCV中必须置NULL */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void *imageId;  /* 同上*/ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    struct _IplTileInfo *tileInfo;  /*同上*/ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int imageSize;    /* 图像数据大小(在交叉存取格式下imageSize=image-&amp;gt;height*image-&amp;gt;widthStep），单位字节*/ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *imageData;    /* 指向排列的图像数据 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int widthStep;     /* 排列的图像行大小，以字节为单位 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int BorderMode[4];     /* 边际结束模式, 被OpenCV忽略 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int BorderConst[4];    /* 同上 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *imageDataOrigin;    /* 指针指向一个不同的图像数据结构（不是必须排列的），是为了纠正图像内存分配准备的 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; IplImage;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重要变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;width和height&lt;/li&gt;
&lt;li&gt;depth和nchannals&lt;ul&gt;
&lt;li&gt;depth 图片是由一个个像素点构成的，所有不同颜色的像素点构成了一副完整的图像，计算机存储图片是以二进制来进行的。1 bit : 用一位来存储，那么这个像素点的取值范围就是0或者1，那么我们看来这幅图片要么是黑色要么是白色。4 bit : 取值范围为 0 到 2 的4次方。8 bit : 来存储像素点的取值范围为 0 到 2 的8次方。以此类推，我们把计算机存储单个像素点所用到的bit为称之为图像的深度.&lt;/li&gt;
&lt;li&gt;我们知道了图片的深度信息，如果是24位的图片他的取值范围为 0 到 2的24次方，这个取值范围是相当的庞大的，那怎么根据图片某像素的深度值来确定那一像素点的颜色呢？我们都知道颜色的三元素 Red, Green, Blue. 如果是深度为24=3*8，我们刚好就可以用第一个8位存储Red值，第二个存储Green值，第三个存储Blue值, 2的8次方刚好是255,所以我们一般看到的RGB值都是(0-255,0-255,0-255)这样的值。如果用rgb来表示图片的颜色值，我们称这样的图片通道为三。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;origin和dataOrder&lt;ul&gt;
&lt;li&gt;origin变量可以有两种取值：IPL_ORIGIN_TL或者IPL_ORIGIN_BL，分别设置坐标原点的位置于图像的左上角或者左下角&lt;/li&gt;
&lt;li&gt;dataOrder中的两个取值：交叉存取颜色通道是颜色数据排列将会是BGRBGR…的交错排列。分开的颜色通道是有几个颜色通道就分几个颜色平面存储。roi是IplROI结构体，该结构体包含了xOffset,yOffset,height,width,coi成员变量，其中xOffset,yOffset是x,y坐标，coi代表channel of interest(感兴趣的通道)，非0的时候才有效。访问图像中的数据元素，分间接存储和直接存储，当图像元素为浮点型时，(uchar &lt;em&gt;) 改为 (float &lt;/em&gt;)： &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*间接存取*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IplImage* img=cvLoadImage(&lt;span class=&quot;string&quot;&gt;&quot;lena.jpg&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvScalar s;       &lt;span class=&quot;comment&quot;&gt;/*sizeof(s) == img-&amp;gt;nChannels*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s=cvGet2D(img,i,j);  &lt;span class=&quot;comment&quot;&gt;/*get the (i,j) pixel value*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cvSet2D(img,i,j,s);   &lt;span class=&quot;comment&quot;&gt;/*set the (i,j) pixel value*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*宏操作*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IplImage* img; &lt;span class=&quot;comment&quot;&gt;//malloc memory by cvLoadImage or cvCreateImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; row &amp;lt;　img-&amp;gt;height; row++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; col &amp;lt; img-&amp;gt;width; col++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = CV_IMAGE_ELEM(img, UCHAR, row, col * img-&amp;gt;nChannels + &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        g = CV_IMAGE_ELEM(img, UCHAR, row, col * img-&amp;gt;nChannels + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        r = CV_IMAGE_ELEM(img, UCHAR, row, col * img-&amp;gt;nChannels + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*直接存取*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IplImage* img; &lt;span class=&quot;comment&quot;&gt;//malloc memory by cvLoadImage or cvCreateImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uchar b, g, r; &lt;span class=&quot;comment&quot;&gt;// 3 channels&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; row &amp;lt;　img-&amp;gt;height; row++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; col &amp;lt; img-&amp;gt;width; col++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = ((uchar *)(img-&amp;gt;imageData + row * img-&amp;gt;widthStep))[col * img-&amp;gt;nChannels + &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        g = ((uchar *)(img-&amp;gt;imageData + row * img-&amp;gt;widthStep))[col * img-&amp;gt;nChannels + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        r = ((uchar *)(img-&amp;gt;imageData + row * img-&amp;gt;widthStep))[col * img-&amp;gt;nChannels + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 初始化使用IplImage *，是一个指向结构体IplImage的指针：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IplImage * cvLoadImage(const char * filename, int iscolor CV_DEFAULT(CV_LOAD_IMAGE_COLOR)); //load images from specified image &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IplImage * cvCreateImage(CvSize size, int depth, int channels);  //allocate memory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;CvMat&quot;&gt;&lt;a href=&quot;#CvMat&quot; class=&quot;headerlink&quot; title=&quot;CvMat&quot;&gt;&lt;/a&gt;CvMat&lt;/h2&gt;&lt;p&gt;首先，我们需要知道两个事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在OpenCV中没有向量(vector)结构。任何时候需要向量，都只需要一个列矩阵(如果需要一个转置或者共轭向量，则需要一个行矩阵)。&lt;/li&gt;
&lt;li&gt;OpenCV矩阵的概念与我们在线性代数课上学习的概念相比，更抽象，尤其是矩阵的元素，并非只能取简单的数值类型，可以是多通道的值。CvMat 的结构： &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef struct CvMat &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int type;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int step;          /*用字节表示行数据长度*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int* refcount;     /*内部访问*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    union &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uchar*  ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        short*  s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int*    i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float*  fl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        double* db;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; data;    /*数据指针*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     union &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int rows;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    union &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int cols;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; CvMat; /*矩阵结构头*/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 创建CvMat数据：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CvMat * cvCreateMat(int rows, int cols, int type); /*创建矩阵头并分配内存*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CV_INLine CvMat cvMat((int rows, int cols, int type, void* data CV_DEFAULT); /*用已有数据data初始化矩阵*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat * cvInitMatHeader(CvMat * mat, int rows, int cols, int type, void * data CV_DEFAULT(NULL), int step CV_DEFAULT(CV_AUTOSTEP)); /*(用已有数据data创建矩阵头)*/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 对矩阵数据进行访问：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*间接访问*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*访问CV_32F1和CV_64FC1*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cvmSet( CvMat* mat, int row, int col, double value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cvmGet( const CvMat* mat, int row, int col );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*访问多通道或者其他数据类型: scalar的大小为图像的通道值*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvScalar cvGet2D(const CvArr * arr, int idx0, int idx1); //CvArr只作为函数的形参void cvSet2D(CvArr* arr, int idx0, int idx1, CvScalar value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*直接访问: 取决于数组的数据类型*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*CV_32FC1*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat * cvmat = cvCreateMat(4, 4, CV_32FC1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cvmat-&amp;gt;data.fl[row * cvmat-&amp;gt;cols + col] = (float)3.0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*CV_64FC1*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat * cvmat = cvCreateMat(4, 4, CV_64FC1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cvmat-&amp;gt;data.db[row * cvmat-&amp;gt;cols + col] = 3.0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*一般对于单通道*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat * cvmat = cvCreateMat(4, 4, CV_64FC1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CV_MAT_ELEM(*cvmat, double, row, col) = 3.0; /*double是根据数组的数据类型传入,这个宏不能处理多通道*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*一般对于多通道*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (CV_MAT_DEPTH(cvmat-&amp;gt;type) == CV_32F)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CV_MAT_ELEM_CN(*cvmat, float, row, col * CV_MAT_CN(cvmat-&amp;gt;type) + ch) = (float)3.0; // ch为通道值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (CV_MAT_DEPTH(cvmat-&amp;gt;type) == CV_64F)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CV_MAT_ELEM_CN(*cvmat, double, row, col * CV_MAT_CN(cvmat-&amp;gt;type) + ch) = 3.0; // ch为通道值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*多通道数组*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*3通道*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (int row = 0; row &amp;lt; cvmat-&amp;gt;rows; row++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = cvmat -&amp;gt;data.fl + row * (cvmat-&amp;gt;step / 4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (int col = 0; col &amp;lt; cvmat-&amp;gt;cols; col++)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *p = (float) row + col;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *(p+1) = (float)row + col + 1;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *(p+2) = (float)row + col + 2;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         p += 3;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*2通道*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat * vector = cvCreateMat(1,3, CV_32SC2);CV_MAT_ELEM(*vector, CvPoint, 0, 0) = cvPoint(100,100);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*4通道*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat * vector = cvCreateMat(1,3, CV_64FC4);CV_MAT_ELEM(*vector, CvScalar, 0, 0) = CvScalar(0, 0, 0, 0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 复制矩阵操作：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*复制矩阵*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat* M1 = cvCreateMat(4,4,CV_32FC1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat* M2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M2=cvCloneMat(M1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Mat&quot;&gt;&lt;a href=&quot;#Mat&quot; class=&quot;headerlink&quot; title=&quot;Mat&quot;&gt;&lt;/a&gt;Mat&lt;/h2&gt;&lt;p&gt;Mat是opencv2.0推出的处理图像的新的数据结构，现在越来越有趋势取代之前的cvMat和lplImage，相比之下Mat最大的好处就是能够更加方便的进行内存管理，不再需要程序员手动管理内存的释放。opencv2.3中提到Mat是一个多维的密集数据数组，可以用来处理向量和矩阵、图像、直方图等等常见的多维数据。 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class CV_EXPORTS Mat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*..很多方法..*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*............*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int flags;（Note ：目前还不知道flags做什么用的）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int dims;  /*数据的维数*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int rows,cols; /*行和列的数量;数组超过2维时为(-1，-1)*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uchar *data;   /*指向数据*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int * refcount;   /*指针的引用计数器; 阵列指向用户分配的数据时，指针为 NULL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* 其他成员 */ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 从以上结构体可以看出Mat也是一个矩阵头，默认不分配内存，只是指向一块内存(注意读写保护)。初始化使用create函数或者Mat构造函数，以下整理自opencv2.3.1 Manual:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Mat(nrows, ncols, type, fillValue]); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M.create(nrows, ncols, type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例子：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat M(7,7,CV_32FC2,Scalar(1,3)); /*创建复数矩阵1+3j*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M.create(100, 60, CV_8UC(15)); /*创建15个通道的8bit的矩阵*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*创建100*100*100的8位数组*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int sz[] = &amp;#123;100, 100, 100&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat bigCube(3, sz, CV_8U, Scalar:all(0));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*现成数组*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double m[3][3] = &amp;#123;&amp;#123;a, b, c&amp;#125;, &amp;#123;d, e, f&amp;#125;, &amp;#123;g, h, i&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat M = Mat(3, 3, CV_64F, m).inv();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*图像数据*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat img(Size(320,240),CV_8UC3); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat img(height, width, CV_8UC3, pixels, step); /*const unsigned char* pixels,int width, int height, int step*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*使用现成图像初始化Mat*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IplImage* img = cvLoadImage(&amp;quot;greatwave.jpg&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat mtx(img,0); // convert IplImage* -&amp;gt; Mat; /*不复制数据,只创建一个数据头*/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问Mat的数据元素：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*对某行进行访问*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat M;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M.row(3) = M.row(3) + M.row(5) * 3; /*第5行扩大三倍加到第3行*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*对某列进行复制操作*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat M1 = M.col(1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M.col(7).copyTo(M1); /*第7列复制给第1列*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*对某个元素的访问*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat M;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M.at&amp;lt;double&amp;gt;(i,j); /*double*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M.at(uchar)(i,j);  /*CV_8UC1*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vec3i bgr1 = M.at(Vec3b)(i,j) /*CV_8UC3*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vec3s bgr2 = M.at(Vec3s)(i,j) /*CV_8SC3*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vec3w bgr3 = M.at(Vec3w)(i,j) /*CV_16UC3*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*遍历整个二维数组*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double sum = 0.0f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for(int row = 0; row &amp;lt; M.rows; row++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const double * Mi = M.ptr&amp;lt;double&amp;gt;(row); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (int col = 0; col &amp;lt; M.cols; col++)      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sum += std::max(Mi[j], 0.);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*STL iterator*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double sum=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MatConstIterator&amp;lt;double&amp;gt; it = M.begin&amp;lt;double&amp;gt;(), it_end = M.end&amp;lt;double&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for(; it != it_end; ++it)    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum += std::max(*it, 0.);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Mat可进行Matlab风格的矩阵操作，如初始化的时候可以用initializers,zeros(), ones(), eye(). 除以上内容之外，Mat还有有3个重要的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Mat mat = imread(const String* filename);           // 读取图像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imshow(const string frameName, InputArray mat);  //    显示图像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imwrite (const string&amp;amp; filename, InputArray img);    //储存图像&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;CvMat-Mat-IplImage之间的互相转换&quot;&gt;&lt;a href=&quot;#CvMat-Mat-IplImage之间的互相转换&quot; class=&quot;headerlink&quot; title=&quot;CvMat, Mat, IplImage之间的互相转换&quot;&gt;&lt;/a&gt;CvMat, Mat, IplImage之间的互相转换&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IpIImage -&amp;gt; CvMat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*cvGetMat*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat matheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat * mat = cvGetMat(img, &amp;amp;matheader);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*cvConvert*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat * mat = cvCreateMat(img-&amp;gt;height, img-&amp;gt;width, CV_64FC3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cvConvert(img, mat)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IplImage -&amp;gt; Mat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat::Mat(const IplImage* img, bool copyData=false);/*default copyData=false,与原来的IplImage共享数据,只是创建一个矩阵头*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例子：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IplImage* iplImg = cvLoadImage(&amp;quot;greatwave.jpg&amp;quot;, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat mtx(iplImg); /* IplImage * -&amp;gt; Mat,共享数据; or : Mat mtx = iplImg;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat -&amp;gt; IplImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat M&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IplImage iplimage = M; /*只创建图像头，不复制数据*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat -&amp;gt; Mat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat::Mat(const CvMat* m, bool copyData=false); /*类似IplImage -&amp;gt; Mat，可选择是否复制数据*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mat -&amp;gt; CvMat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例子(假设Mat类型的imgMat图像数据存在)：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvMat cvMat = imgMat;/*Mat -&amp;gt; CvMat, 类似转换到IplImage，不复制数据只创建矩阵头&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;ROI和widthStep&quot;&gt;&lt;a href=&quot;#ROI和widthStep&quot; class=&quot;headerlink&quot; title=&quot;ROI和widthStep&quot;&gt;&lt;/a&gt;ROI和widthStep&lt;/h1&gt;&lt;h2 id=&quot;ROI&quot;&gt;&lt;a href=&quot;#ROI&quot; class=&quot;headerlink&quot; title=&quot;ROI&quot;&gt;&lt;/a&gt;ROI&lt;/h2&gt;&lt;p&gt;ROI和widthStep在实际工作中有很重要的作用，能够提高计算机视觉代码的执行速度。允许对图像中的某一小部分进行操作。&lt;br&gt;void cvSetImageROI( IplImage&lt;em&gt; image, CvRect rect);    //设置ROI&lt;br&gt;void cvResetImageROI( IplImage&lt;/em&gt; image );            //取消ROI&lt;br&gt;为了解释用法，加载一副图片，并修改一些区域&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cv.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;highgui.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ch3_ex3_12 image_name x y width height add# &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IplImage* src;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvNamedWindow(&lt;span class=&quot;string&quot;&gt;&quot;Example3_12_pre&quot;&lt;/span&gt;, CV_WINDOW_AUTOSIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvNamedWindow(&lt;span class=&quot;string&quot;&gt;&quot;Example3_12_post&quot;&lt;/span&gt;, CV_WINDOW_AUTOSIZE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( argc == &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &amp;amp;&amp;amp; ((src=cvLoadImage(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = atoi(argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = atoi(argv[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; width = atoi(argv[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; height = atoi(argv[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; add = atoi(argv[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cvShowImage( &lt;span class=&quot;string&quot;&gt;&quot;Example3_12_pre&quot;&lt;/span&gt;, src);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cvSetImageROI(src, cvRect(x,y,width,height));	&lt;span class=&quot;comment&quot;&gt;//设置ROI区域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cvAddS(src, cvScalar(add),src);					&lt;span class=&quot;comment&quot;&gt;//增加操作,将图片仍然存放载源图片中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cvResetImageROI(src);							&lt;span class=&quot;comment&quot;&gt;//取消ROI区域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cvShowImage( &lt;span class=&quot;string&quot;&gt;&quot;Example3_12_post&quot;&lt;/span&gt;,src);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cvWaitKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvReleaseImage( &amp;amp;src );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvDestroyWindow(&lt;span class=&quot;string&quot;&gt;&quot;Example3_12_pre&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cvDestroyWindow(&lt;span class=&quot;string&quot;&gt;&quot;Example3_12_post&quot;&lt;/span&gt;);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我是在ubuntu 下面进行编译的：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wq@wq-Lenovo-K4450:~/code/c++/opencv$ g++ imageROI.cpp -o Test `pkg-config --cflags --libs opencv`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wq@wq-Lenovo-K4450:~/code/c++/opencv$ ./Test test.jpg 20 20 500 300 50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;init done &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opengl support availabl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i3.piimg.com/5a05fd244b8e9f47.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;widthStep&quot;&gt;&lt;a href=&quot;#widthStep&quot; class=&quot;headerlink&quot; title=&quot;widthStep&quot;&gt;&lt;/a&gt;widthStep&lt;/h2&gt;&lt;p&gt;通过巧妙地使用widthStep，可以达到同样的效果。看到下面的代码，可能会想，跟ROI比好麻烦呀，那么为什么需要这个东西呢？如果想要一个图像中的多个子区域处于活动状态，就需要使用这个了，而ROI只能串行处理并且必须不断地设置和重置。&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cv.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;highgui.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IplImage* interest_img;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CvRect interest_rect;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( argc == &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &amp;amp;&amp;amp; ((interest_img=cvLoadImage(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        interest_rect.x = atoi(argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        interest_rect.y = atoi(argv[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        interest_rect.width = atoi(argv[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        interest_rect.height = atoi(argv[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; add = atoi(argv[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//设想要处理图片interest_img和某一个区域interest_rect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IplImage *sub_img = cvCreateImageHeader(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          cvSize(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             interest_rect.width, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             interest_rect.height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          interest_img-&amp;gt;depth, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          interest_img-&amp;gt;nChannels&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sub_img-&amp;gt;origin = interest_img-&amp;gt;origin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sub_img-&amp;gt;widthStep = interest_img-&amp;gt;widthStep;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sub_img-&amp;gt;imageData = interest_img-&amp;gt;imageData + &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          interest_rect.y * interest_img-&amp;gt;widthStep  +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          interest_rect.x * interest_img-&amp;gt;nChannels;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cvAddS( sub_img, cvScalar(add), sub_img );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cvReleaseImageHeader(&amp;amp;sub_img);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cvNamedWindow( &lt;span class=&quot;string&quot;&gt;&quot;Roi_Add&quot;&lt;/span&gt;, CV_WINDOW_AUTOSIZE );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cvShowImage( &lt;span class=&quot;string&quot;&gt;&quot;Roi_Add&quot;&lt;/span&gt;, interest_img );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cvWaitKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wq@wq-Lenovo-K4450:~/code/c++/opencv$ g++ widthStep.cpp -o Test `pkg-config --cflags --libs opencv`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wq@wq-Lenovo-K4450:~/code/c++/opencv$ ./Test test.jpg 20 20 500 300 50init done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://i3.piimg.com/43be2a578c4f3d55.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;《学习OpenCV（中文版）》&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.it165.net/os/html/201407/8801.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在linux环境下编译运行OpenCV程序的两种方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/summerRQ/articles/2406109.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/summerRQ/articles/2406109.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/guoqiaojin/p/3176692.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/guoqiaojin/p/3176692.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基本数据类型&lt;ul&gt;
&lt;li&gt;DataType&lt;/li&gt;
&lt;li&gt;二维点坐标&lt;/li&gt;
&lt;li&gt;三维点坐标&lt;/li&gt;
&lt;li&gt;尺寸&lt;/li&gt;
&lt;li&gt;矩形区域&lt;/li&gt;
&lt;li&gt;Matx小矩阵&lt;/li&gt;
&lt;li&gt;vec短向量&lt;/li&gt;
&lt;li&gt;Scalar_四维向量&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Mat矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IplImage, CvMat与Mat&lt;ul&gt;
&lt;li&gt;IplImage&lt;/li&gt;
&lt;li&gt;CvMat&lt;/li&gt;
&lt;li&gt;Mat&lt;/li&gt;
&lt;li&gt;CvMat, Mat, IplImage之间的互相转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ROI和widthStep&lt;ul&gt;
&lt;li&gt;ROI&lt;/li&gt;
&lt;li&gt;widthStep&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="opencv" scheme="http://yoursite.com/categories/opencv/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
      <category term="机器视觉" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>opencv入门</title>
    <link href="http://yoursite.com/2016/05/04/opencv%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2016/05/04/opencv入门/</id>
    <published>2016-05-04T10:08:11.000Z</published>
    <updated>2016-05-04T10:14:36.510Z</updated>
    
    <content type="html">&lt;p&gt;之前一直是使用matlab，但是matlab的速度等等都是十分的慢，老师还是让我学习opencv，比别人已经晚了一年了，所以需要更加的努力。&lt;br&gt;我使用的opencv的配置是opencv2.4.9+vs2012，这个是老师推荐的配置，使用的是《学习OpenCV》和《数字图像处理（第三版）》这两本书学习计算机视觉，加油！！！！！！！！！！！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;下面的代码是opencv中入门的程序，没有什么可以说的，只是为了认识一下opencv，我把写成了一个类，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//algorithm.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;opencv2/opencv.hpp&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; cv;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Test&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showImage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showAvi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showAviSlide&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Test::showImage()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* imagename = &lt;span class=&quot;string&quot;&gt;&quot;lily.png&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Mat img = imread(imagename);	&lt;span class=&quot;comment&quot;&gt;//读取图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(img.empty())  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Can not load image %s\n&quot;&lt;/span&gt;, imagename);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	imshow(&lt;span class=&quot;string&quot;&gt;&quot;image&quot;&lt;/span&gt;, img);			&lt;span class=&quot;comment&quot;&gt;//显示图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	waitKey(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Test::showAvi()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvNamedWindow(&lt;span class=&quot;string&quot;&gt;&quot;Example2&quot;&lt;/span&gt;,CV_WINDOW_AUTOSIZE);				&lt;span class=&quot;comment&quot;&gt;//申请可以自动调节大小的窗口Example1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CvCapture *capture=cvCreateFileCapture(&lt;span class=&quot;string&quot;&gt;&quot;C:/Users/allen/Videos/test.avi&quot;&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//读取avi格式的影片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IplImage*frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        frame = cvQueryFrame(capture);							&lt;span class=&quot;comment&quot;&gt;//读取下一个影片帧率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!frame)&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cvShowImage(&lt;span class=&quot;string&quot;&gt;&quot;Example2&quot;&lt;/span&gt;,frame);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c=cvWaitKey(&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;);									&lt;span class=&quot;comment&quot;&gt;//每读取一个视频片度就停止33毫秒，并且会收集键盘的输入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(c == &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;										&lt;span class=&quot;comment&quot;&gt;//27就是对应键盘上的ESC建，如果没有按键盘的话C为-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvReleaseCapture(&amp;amp;capture);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvDestroyWindow(&lt;span class=&quot;string&quot;&gt;&quot;Example2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*****************************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***                                  视频播放控制                                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*******************************************************************************************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; g_slider_position = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CvCapture * g_capture =&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTrackbarSlide&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;span class=&quot;comment&quot;&gt;//再拖动滚动条的时候，滚动条的位置会被作为int数字传入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cvSetCaptureProperty(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g_capture,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CV_CAP_PROP_POS_FRAMES,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pos&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Test::showAviSlide()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvNamedWindow(&lt;span class=&quot;string&quot;&gt;&quot;Example3&quot;&lt;/span&gt;,CV_WINDOW_AUTOSIZE);&lt;span class=&quot;comment&quot;&gt;//申请可以自动调节大小的窗口Example1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g_capture=cvCreateFileCapture(&lt;span class=&quot;string&quot;&gt;&quot;C:/Users/allen/Videos/test.avi&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//读取avi格式的影片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; frames = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) cvGetCaptureProperty(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            g_capture,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CV_CAP_PROP_FRAME_COUNT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(frames != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cvCreateTrackbar(  &lt;span class=&quot;comment&quot;&gt;//进度条&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;Position&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;Example3&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;amp;g_slider_position,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            frames,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            onTrackbarSlide&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IplImage * frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        frame = cvQueryFrame(g_capture);&lt;span class=&quot;comment&quot;&gt;//读取下一个影片帧率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!frame)&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cvShowImage(&lt;span class=&quot;string&quot;&gt;&quot;Example3&quot;&lt;/span&gt;,frame);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c=cvWaitKey(&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//每读取一个视频片度就停止33毫秒，并且会收集键盘的输入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(c == &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//27就是对应键盘上的ESC建，如果没有按键盘的话C为-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvReleaseCapture(&amp;amp;g_capture);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cvDestroyWindow(&lt;span class=&quot;string&quot;&gt;&quot;Example2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; conversion&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;smoothImage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(IplImage* image)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; conversion::smoothImage(IplImage* image)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//创建显示输入输出窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvNamedWindow( &lt;span class=&quot;string&quot;&gt;&quot;smoothImage-in&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvNamedWindow( &lt;span class=&quot;string&quot;&gt;&quot;smoothImage-out&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//创建一个窗口显示输入图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvShowImage( &lt;span class=&quot;string&quot;&gt;&quot;smoothImage-in&quot;&lt;/span&gt;, image);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//创建一副图像承载平滑输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IplImage* out = cvCreateImage(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cvGetSize(image), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		IPL_DEPTH_8U,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//平滑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvSmooth( image, out, CV_GAUSSIAN, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//显示平滑图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvShowImage(&lt;span class=&quot;string&quot;&gt;&quot;smoothImage-out&quot;&lt;/span&gt;, out);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvReleaseImage( &amp;amp;out);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvWaitKey( &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvDestroyWindow( &lt;span class=&quot;string&quot;&gt;&quot;smoothImage-in&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cvDestroyWindow( &lt;span class=&quot;string&quot;&gt;&quot;smoothImage-out&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// test.cpp: 主项目文件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;stdafx.h&quot;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;opencv2/opencv.hpp&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;algorithm.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; cv;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Test::showImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Test::showAvi();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Test::showAviSlide();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IplImage* img = cvLoadImage(&lt;span class=&quot;string&quot;&gt;&quot;lily.png&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	conversion::smoothImage(img);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直是使用matlab，但是matlab的速度等等都是十分的慢，老师还是让我学习opencv，比别人已经晚了一年了，所以需要更加的努力。&lt;br&gt;我使用的opencv的配置是opencv2.4.9+vs2012，这个是老师推荐的配置，使用的是《学习OpenCV》和《数字图像处理（第三版）》这两本书学习计算机视觉，加油！！！！！！！！！！！&lt;br&gt;
    
    </summary>
    
      <category term="opencv" scheme="http://yoursite.com/categories/opencv/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
      <category term="机器视觉" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>C++推荐书单</title>
    <link href="http://yoursite.com/2016/04/18/C-%E6%8E%A8%E8%8D%90%E4%B9%A6%E5%8D%95/"/>
    <id>http://yoursite.com/2016/04/18/C-推荐书单/</id>
    <published>2016-04-18T01:12:50.000Z</published>
    <updated>2016-04-18T01:18:26.054Z</updated>
    
    <content type="html">&lt;p&gt;如何学习一门语言，最简单的方式就是看书，那么如何选择c++的书呢？这是stackoverflow上的一个帖子，关于c++书单推荐的帖子。不像其他的变成语言从网上找到一些教程就可以入门甚至学的还可以，而c++如果没有一本很好的关于c++编程的书是很难很快就学会的。找到一本适合的书是一件很大很复杂的事情。事实上市面上有太多垃圾书籍了，这篇帖子就是讨论关于c++高质量的书籍的。&lt;br&gt;原文网址：&lt;a href=&quot;http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h1&gt;&lt;h2 id=&quot;毫无编程经验&quot;&gt;&lt;a href=&quot;#毫无编程经验&quot; class=&quot;headerlink&quot; title=&quot;毫无编程经验&quot;&gt;&lt;/a&gt;毫无编程经验&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;C++程序设计原理与实践 （Programming: Principles and Practice Using C++ ）作者：Bjarne Stroustrup C++之父写的C++入门书籍。本书面向没有编程经验的初学者，但相信有编程经验的人也能从本书中学到不少东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##有一定编程基础&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C++ Primer 1 作者：Stanley Lippman, Josée Lajoie, and Barbara E. Moo (更新到C++11) 近1千页，本书透彻的介绍了C++，以浅显和详细的方式讲到C++语言差不多所有内容。2012年8月发行的第五版包含C++11的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accelerated C++ 作者：Andrew Koenig and Barbara Moo 这本书覆盖了和C++ Primer一样的内容，但厚度只有C++ Primer的四分之一。这主要是因为本书面向的不是编程的初学者，而是有其它语言经验的C++初学者。对于初学者，本书学习曲线稍显陡峭，但对于能克服这一点的学习者而言，它确实非常紧凑的介绍了C++这门语言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C++编程思想（Thinking in C++) 作者：Bruce Eckel 共两卷，第二卷主要将标准库，但还是不错的。这本书中文版翻译有点烂&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;最实用&quot;&gt;&lt;a href=&quot;#最实用&quot; class=&quot;headerlink&quot; title=&quot;最实用&quot;&gt;&lt;/a&gt;最实用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Effective C++ 作者：Scott Meyers 本书以瞄准成为C++程序员必读的第二本书籍而写，Scott Meyers成功了。早期的版本面向从C语言转过来的程序员。第三版修改为面向从类似Jave等语言转来的程序员。内容覆盖了50多个很容易记住的条款，每个条款深入浅出（并且有趣）讲到了你可能没有考虑过的C++规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Effective STL 作者：Scott Meyers 讲解方式和Effective类似，但内容主要面向于STL。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Effective Modern c++ 作者:Scott Meyers 这本书是effective c++的新版本，主要讲从c++03过度到c++ 11和c++ 14.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;中级&quot;&gt;&lt;a href=&quot;#中级&quot; class=&quot;headerlink&quot; title=&quot;中级&quot;&gt;&lt;/a&gt;中级&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;More Effective C++ 作者：Scott Meyers 更多（深入）关于C++的规则。没有前一本Effective C++重要。但同样值得一读。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exceptional C++ 作者：Herb Sutter 讲解方式为提出并解决一系列的C++难题。本书极其透彻的讲解了C++资源管理、异常安全和RAII。同时覆盖了一些较为深入的技术，比如：编译防火墙（pimpl idiom)、名字查找规则,、好的类设计和C++内存模型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More Exceptional C++ 作者：Herb Sutter 讲到了Exceptional C++没有涉及到的更高级的异常安全技术, 同时讨论了高效的C++ OOP方式和如何正确的使用STL。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exceptional C++ Style 作者：Herb Sutter 讨论了泛型编程、最优化和资源管理。本书出彩之处在于谈到了如何用非成员函数和单职责原则编写模块化的C++代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C++编程规范(C++ Coding Standards) 作者：Herb Sutter and Andrei Alexandrescu “编程规范”这里并不是”代码缩进要用几个空格”。这本书包含了101个例子、惯用法、缺陷，通过这些可以帮助你编写正确、清晰高效的C++代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C++ 模板完全指南(C++ Templates: The Complete Guide)作者：David Vandevoorde and Nicolai M. Josuttis 本书是关于C++11之前的模板的。它覆盖了从非常基础到最高级的元编程知识，解释了模板工作原理的细节(概念和实现方式）。并且讨论了大量的缺陷。附录中包含关于ODR和重载的精彩总结。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;高级&quot;&gt;&lt;a href=&quot;#高级&quot; class=&quot;headerlink&quot; title=&quot;高级&quot;&gt;&lt;/a&gt;高级&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C++设计新思维-泛型编程与设计模式之应用(Modern C++ Design ) 作者：Andrei Alexandrescu泛型编程鼻祖级书籍。本书先介绍了基于策略（policy-based)的设计、type lists 和泛型编程基础， 然后讲到了许多有用的设计模式(包括small object allocators, functors, factories, visitors, and multimethods) 如何被高效、模块化、清晰的泛型代码实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C++模板元编程(C++ Template Metaprogramming)作者：David Abrahams and Aleksey Gurtovoy 更多的是讲解boost::mpl，想要深入理解mpl的可以看一下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;C++ Concurrency In Action 作者：Anthony Williams 这本书主要内容是C++11的并发支持，包括线程库、原子(atomics)库、内存模型、锁和互斥量。同时也讲解了开发和调试多线程程序的一些难题。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Advanced C++ Metaprogramming 作者：Davide Di Gennaro 前C++11时代TMP技术的手册级书籍。本书更侧重于工程实践。里面有大量的可能几乎无人知道但很实用的技术写成的代码。本书可能比Alexandrescu的书更值得读。对于资深的开发者来说，这是一个学习C++暗角技术的绝佳机会，通常这些技术要通过资深的编程经历才能获取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C++程序设计语言(The C++ Programming Language) 作者：Bjarne Stroustrup(更新到C++11)C++之父写的经典C++书籍。内容覆盖C++的所有东西，从语言内核到标准库、编程范式和语言哲学(这使得最新版突破1千页)。2013年5月出版的第四版涵盖了C++11的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C++标准程序库(C++ Standard Library Tutorial and Reference) 作者：Nicolai Josuttis (更新到C++11) 这本书是C++标准库（STL）的引导和手册。 2012年4月发行的第二版涵盖了C++11。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The C++ IO Streams and Locales 作者：Angelika Langer and Klaus Kreft 除了这本书，市面上基本没有讲解streams and locales的书。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;手册&quot;&gt;&lt;a href=&quot;#手册&quot; class=&quot;headerlink&quot; title=&quot;手册&quot;&gt;&lt;/a&gt;手册&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;C++程序设计语言(The C++ Programming Language) 作者：Bjarne Stroustrup(更新到C++11)C++之父写的经典C++书籍。内容覆盖C++的所有东西，从语言内核到标准库、编程范式和语言哲学(这使得最新版突破1千页)。2013年5月出版的第四版涵盖了C++11的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C++标准程序库(C++ Standard Library Tutorial and Reference) 作者：Nicolai Josuttis (更新到C++11) 这本书是C++标准库（STL）的引导和手册。 2012年4月发行的第二版涵盖了C++11。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The C++ IO Streams and Locales 作者：Angelika Langer and Klaus Kreft 除了这本书，市面上基本没有讲解streams and locales的书。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;C++ 11手册:&lt;/li&gt;
&lt;li&gt;The C++ Standard (INCITS/ISO/IEC 14882-2011) 作者：C++标准委员会 这当然是C++最权威的标准。要注意的是，C++标准是提供给有足够精力和时间的专家级用户研究用的。国内估计很少有人看，在国外一般它的第一个发行版也非常贵($300+ US)，国外有人会买现在价值$30US的电子发行版。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Overview of the New C++ (C++11/14) 作者：Scott Meyers(更新到C++11/C++14) 这是Scott Meyers开设的一个为期3天的C++课程的教材。Scott Meyers是C++社区最受尊敬的作者之一。虽然内容比较简短，但质量极高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;经典&quot;&gt;&lt;a href=&quot;#经典&quot; class=&quot;headerlink&quot; title=&quot;经典&quot;&gt;&lt;/a&gt;经典&lt;/h1&gt;&lt;p&gt;注意: 下列书中的部分内容可能有些过时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++的设计与演化(The Design and Evolution of C++ )作者：Bjarne Stroustrup 如果你想知道为什么C++是今天这个样子，那么这本书将给你答案。本书覆盖C++标准化之前的一切东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;C++沉思录(Ruminations on C++) 作者：Andrew Koenig and Barbara Moo 本书不是为了讲解具体的C++技术细节，而是如何通过C++编写出色的OO代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Advanced C++ Programming Styles and Idioms 作者：James Coplien 讲解了一些C++特有的惯用法. 它确实是一本不错的书籍，如果时间闲暇也可一读。不过它确实很老了，可能有些不符合现代的C++。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;大规模C++程序设计（Large Scale C++ Software Design） 作者：John Lakos 本书介绍了如何管理大规模C++软件项目的技术。很值得一读，除了有些过时以外。它是在C++98以前写的，缺少了好多对大规模项目重要的特性（比如名字空间）。假如你工作在一个大规模的C++项目中，你可能想要读它, 不过你需要注意那些不适用甚至错误的技术点。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;深度探索C++对象模型 (Inside the C++ Object Model ) 作者：Stanley Lippman 如果你想知道虚函数是如何实现、多继承时基类是如何在内存中排布的和所有影响性能的东西，那么这本书会给你答案。不过这本书有好多低级的拼写排版错误，英文原版错误更多，侯捷翻译的版本中注明和纠正了很多，但本书绝对值得一读，你将明白编译器如何实现C++的对象模型。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如何学习一门语言，最简单的方式就是看书，那么如何选择c++的书呢？这是stackoverflow上的一个帖子，关于c++书单推荐的帖子。不像其他的变成语言从网上找到一些教程就可以入门甚至学的还可以，而c++如果没有一本很好的关于c++编程的书是很难很快就学会的。找到一本适合的书是一件很大很复杂的事情。事实上市面上有太多垃圾书籍了，这篇帖子就是讨论关于c++高质量的书籍的。&lt;br&gt;原文网址：&lt;a href=&quot;http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>广度优先搜索</title>
    <link href="http://yoursite.com/2016/04/16/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2016/04/16/广度优先搜索/</id>
    <published>2016-04-15T23:26:58.000Z</published>
    <updated>2016-04-18T01:22:51.634Z</updated>
    
    <content type="html">&lt;p&gt;问题：&lt;br&gt;&lt;img src=&quot;http://i2.piimg.com/e204beb4368756f2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;思路：&lt;br&gt;广度优先搜索，找到最短路径。&lt;br&gt;时间复杂度O(n^2)&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAX_N 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAX_M 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; INF = &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::pair&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; P;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; maze[MAX_N][MAX_M+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N, M;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sx, sy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; gx, gy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d[MAX_N][MAX_M];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//四个方向上的移动向量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dx[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, dy[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; sx&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; &amp;lt;&amp;lt; sy &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; gx &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; &amp;lt;&amp;lt; gy &amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;&amp;lt;P&amp;gt; que;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//把所有的位置都初始化为INF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; N; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            d[i][j] = INF;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    que.push(P(sx, sy));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d[sx][sy] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//不断循环知道队列的长度为0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(que.size())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P p = que.front();que.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (p.first == gx &amp;amp;&amp;amp; p.second == gy) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//四个方向的循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nx = p.first + dx[i], ny = p.second + dy[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//判断是否可以移动以及是否已经访问过d[nx][ny]!=INF即为已经访问过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;lt;= nx &amp;amp;&amp;amp; nx &amp;lt; N &amp;amp;&amp;amp; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;lt;= ny &amp;amp;&amp;amp; ny &amp;lt; M &amp;amp;&amp;amp; maze[nx][ny] != &lt;span class=&quot;string&quot;&gt;&#39;#&#39;&lt;/span&gt; &amp;amp;&amp;amp; d[nx][ny] == INF)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//如果可以移动的话，则加入到队列，并且到该位置的距离确定为到p的距离+1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        que.push(P(nx, ny));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d[nx][ny] = d[p.first][p.second] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d[gx][gy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res = bfs();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d %d\n&quot;&lt;/span&gt;, &amp;amp;N, &amp;amp;M);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt;N; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; N; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;//   scanf(&quot;%c&quot;, &amp;amp;buf);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maze[i][j] = buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//cout &amp;lt;&amp;lt; buf &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(buf == &lt;span class=&quot;string&quot;&gt;&#39;S&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sx = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sy = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;start&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(buf == &lt;span class=&quot;string&quot;&gt;&#39;G&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                gx = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                gy = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;end&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//scanf(&quot;&quot;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    solve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;问题：&lt;br&gt;&lt;img src=&quot;http://i2.piimg.com/e204beb4368756f2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="挑战程序设计" scheme="http://yoursite.com/tags/%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>POJ-2386 Lake Counting 挑战程序设计竞赛</title>
    <link href="http://yoursite.com/2016/04/15/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88/"/>
    <id>http://yoursite.com/2016/04/15/深度优先/</id>
    <published>2016-04-14T23:39:12.000Z</published>
    <updated>2016-04-15T22:29:05.427Z</updated>
    
    <content type="html">&lt;h1 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h1&gt;&lt;p&gt;Due to recent rains, water has pooled in various places in Farmer John’s field, which is represented by a rectangle of N x M (1 &amp;lt;= N &amp;lt;= 100; 1 &amp;lt;= M &amp;lt;= 100) squares. Each square contains either water (‘W’) or dry land (‘.’). Farmer John would like to figure out how many ponds have formed in his field. A pond is a connected set of squares with water in them, where a square is considered adjacent to all eight of its neighbors. &lt;/p&gt;
&lt;p&gt;Given a diagram of Farmer John’s field, determine how many ponds he has.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h1&gt;&lt;p&gt;深度优先搜索（DFS）,查找相邻的W块有多少个。&lt;br&gt;时间复杂度:O(N*M)&lt;/p&gt;
&lt;h1 id=&quot;代码：&quot;&gt;&lt;a href=&quot;#代码：&quot; class=&quot;headerlink&quot; title=&quot;代码：&quot;&gt;&lt;/a&gt;代码：&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAX_N 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N, M;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; field[MAX_N][MAX_N+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//现在位置（x, y)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    field[x][y] = &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nx, ny;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//循环遍历8个方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; j &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nx = x + i; ny = y + j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nx &amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nx &amp;lt; N &amp;amp;&amp;amp; ny &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ny &amp;lt;= M &amp;amp;&amp;amp; field[nx][ny] == &lt;span class=&quot;string&quot;&gt;&#39;W&#39;&lt;/span&gt;) dfs(nx, ny);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; M ; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(field[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;W&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dfs(i, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                res++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d %d&quot;&lt;/span&gt;, &amp;amp;N, &amp;amp;M);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; N;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; M; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//  scanf(&quot;%c &quot;, &amp;amp;field[i][j]);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; field[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; N;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; M; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%c &quot;&lt;/span&gt;, field[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    solve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h1&gt;&lt;p&gt;Due to recent rains, water has pooled in various places in Farmer John’s field, which is represented by a rectangle of N x M (1 &amp;lt;= N &amp;lt;= 100; 1 &amp;lt;= M &amp;lt;= 100) squares. Each square contains either water (‘W’) or dry land (‘.’). Farmer John would like to figure out how many ponds have formed in his field. A pond is a connected set of squares with water in them, where a square is considered adjacent to all eight of its neighbors. &lt;/p&gt;
&lt;p&gt;Given a diagram of Farmer John’s field, determine how many ponds he has.&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="挑战程序设计" scheme="http://yoursite.com/tags/%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>抽签 挑战程序设计竞赛</title>
    <link href="http://yoursite.com/2016/04/14/%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B-%E6%8A%BD%E7%AD%BE/"/>
    <id>http://yoursite.com/2016/04/14/挑战程序设计竞赛-抽签/</id>
    <published>2016-04-13T23:08:33.000Z</published>
    <updated>2016-04-14T00:45:44.014Z</updated>
    
    <content type="html">&lt;p&gt;问题：&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/74311666jw1f2vv43yt30j20ow09nq4c.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;如果是我，我肯定最开始想到的是暴力破解，然而时间复杂度太高了，数据量小还好，如果数据量太大，时间会疯涨。&lt;br&gt;书中给了一个思路:将数组内相加等于某个值，转换为查找这个值减去数组内的一个或两个变量，这样就将问题转换为查找问题了，可以使用二分查找。这里再回顾一下查找算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序查找（时间复杂度O(n))&lt;/li&gt;
&lt;li&gt;折半查找(时间复杂度O(log(n)))&lt;/li&gt;
&lt;li&gt;B树又称二叉查找&lt;/li&gt;
&lt;li&gt;B+树&lt;/li&gt;
&lt;li&gt;散列表（如果散列表构建的好，时间复杂度会是O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里使用折半查找，折半查找需要将数组排好序，排序算法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部排序（使用内存）&lt;ul&gt;
&lt;li&gt;插入排序&lt;ul&gt;
&lt;li&gt;直接插入排序&lt;/li&gt;
&lt;li&gt;希尔排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择排序&lt;ul&gt;
&lt;li&gt;简单选择排序&lt;/li&gt;
&lt;li&gt;堆排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交换排序&lt;ul&gt;
&lt;li&gt;冒泡排序&lt;/li&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;归并排序&lt;/li&gt;
&lt;li&gt;基数排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外部排序（内存和外存结合使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法一：&lt;/p&gt;
&lt;p&gt;将问题转换为查找number[k]=m-number[i]-number[j]&lt;br&gt;时间复杂度$O(n^{2}log(n))&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myfunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (i &amp;lt; j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m,  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; number)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::sort(number.begin(), number.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; f = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; n; k++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                std::cout &amp;lt;&amp;lt;m - number[i]-number[j]&amp;lt;&amp;lt;&quot;search&quot; &amp;lt;&amp;lt; number[k]&amp;lt;&amp;lt;std::endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::binary_search(number.begin(), number.end(),m-number[i]-number[j]-number[k], myfunction))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    f = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (f) &lt;span class=&quot;built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Yes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;No&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, m, buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d %d&quot;&lt;/span&gt;, &amp;amp;n, &amp;amp;m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        k.push_back(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    solve(n, m, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法二：&lt;br&gt;将问题转换为查找number[i]+number[j] = m - number[k]&lt;br&gt;时间复杂度$O(n_{2}log(n))&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myfunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (i &amp;lt; j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m,  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; number)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; number2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt; n; j ++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                number2.push_back(number[i] + number[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::sort(number2.begin(), number2.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; f = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                std::cout &amp;lt;&amp;lt;m - number[i]-number[j]&amp;lt;&amp;lt;&quot;search&quot; &amp;lt;&amp;lt; number[k]&amp;lt;&amp;lt;std::endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::binary_search(number.begin(), number.end(),m-number[i]-number[j], myfunction))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    f = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (f) &lt;span class=&quot;built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Yes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;No&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, m, buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d %d&quot;&lt;/span&gt;, &amp;amp;n, &amp;amp;m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        k.push_back(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    solve(n, m, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;问题：&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/74311666jw1f2vv43yt30j20ow09nq4c.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="挑战程序设计" scheme="http://yoursite.com/tags/%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>梯度下降法</title>
    <link href="http://yoursite.com/2016/04/13/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/"/>
    <id>http://yoursite.com/2016/04/13/梯度下降法/</id>
    <published>2016-04-13T11:56:19.000Z</published>
    <updated>2016-04-13T14:01:17.340Z</updated>
    
    <content type="html">&lt;p&gt;梯度下降法主要应用与找到最小值，是求解&lt;strong&gt;无约束最优化&lt;/strong&gt;问题的一种最常用的方法。这里求解的是凸优化问题，如果不是凸优化，那么使用梯度下降法只能找到局部最优解。&lt;br&gt;举一个例子，假设你正在山坡上，也就是开始的点上面，你&lt;strong&gt;只能看到周围1mm&lt;/strong&gt;的地方，你想要最快到达最低点，你怎么办？正常人应该会想，从周围1mm范围内最低的点走，肯定会走越低的。有人说，如果地上有一个坑，那就一直在坑里吗？这个问题…就是非凸优化的问题啦，不较真不较真啦。&lt;br&gt;&lt;img src=&quot;http://i3.piimg.com/031bc97949ed0128.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;随机梯度下降法&quot;&gt;&lt;a href=&quot;#随机梯度下降法&quot; class=&quot;headerlink&quot; title=&quot;随机梯度下降法&quot;&gt;&lt;/a&gt;随机梯度下降法&lt;/h1&gt;&lt;p&gt;用公式表达上面的问题就是：&lt;br&gt;$$min_{a\in R^{n}}J(a)$$&lt;br&gt;这里J(a)是目标函数&lt;br&gt;梯度家奖罚是一种迭代算法，选取适当的初值，不断迭代，更新x的值，进行目标函数的极小化，直到收敛。即：&lt;br&gt;&lt;img src=&quot;http://i4.piimg.com/0c36a0aa4382c920.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;关键问题：如何设计步长&lt;img src=&quot;http://i2.piimg.com/d5bea32b6683285a.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果选的太小，则算法收敛慢，如果步长太大，容易导致发散。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法 梯度下降法&lt;/strong&gt;&lt;br&gt;输入：目标函数J(a), 梯度函数$s = \nabla J(x)$,计算精度$\varepsilon$;&lt;br&gt;输出：$F(x)$的极小值$x^{*}$&lt;br&gt;&lt;img src=&quot;http://i4.piimg.com/c168b315202bf4e4.png&quot; alt=&quot;Drawing&quot; width=&quot;400px&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里面的初始点选择也会导致局部最优，而不是全局最优点。如图：&lt;br&gt;&lt;img src=&quot;http://i3.piimg.com/031bc97949ed0128.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果你初始点选择载右边那个高峰，有可能到达右边的低谷中。解决这个问题的思路，可以在迭代过程中加入模拟退火或遗传算法的思想进去。&lt;/p&gt;
&lt;h1 id=&quot;梯度下降法的集中变形形式&quot;&gt;&lt;a href=&quot;#梯度下降法的集中变形形式&quot; class=&quot;headerlink&quot; title=&quot;梯度下降法的集中变形形式&quot;&gt;&lt;/a&gt;梯度下降法的集中变形形式&lt;/h1&gt;&lt;p&gt;在具体使用梯度下降法的过程中，主要有以下几种不同的变种，即：batch、mini-batch、SGD和online。其主要区别是不同的变形在训练数据的选择上。&lt;/p&gt;
&lt;h2 id=&quot;batch-gradient-descent&quot;&gt;&lt;a href=&quot;#batch-gradient-descent&quot; class=&quot;headerlink&quot; title=&quot;batch gradient descent&quot;&gt;&lt;/a&gt;batch gradient descent&lt;/h2&gt;&lt;p&gt;批梯度下降法(Batch Gradient Descent)针对的是整个数据集，通过对所有的样本的计算来求解梯度的方向。&lt;/p&gt;
&lt;p&gt;批梯度下降法的损失函数为：&lt;/p&gt;
&lt;p&gt;(θ)=12m∑(h(x)−y)&lt;br&gt;针对上述的损失函数，在批梯度的优化过程中，对每一个样本都需要计算其梯度，批梯度的优化过程为：&lt;/p&gt;
&lt;p&gt;repeate{θ:=θ−α1m∑(h(x)−y)x}&lt;/p&gt;
&lt;h2 id=&quot;mini-batch-gradient-descent&quot;&gt;&lt;a href=&quot;#mini-batch-gradient-descent&quot; class=&quot;headerlink&quot; title=&quot;mini-batch gradient descent&quot;&gt;&lt;/a&gt;mini-batch gradient descent&lt;/h2&gt;&lt;p&gt;在上述的批梯度的方式中每次迭代都要使用到所有的样本，对于数据量特别大的情况，如大规模的机器学习应用，每次迭代求解所有样本需要花费大量的计算成本。是否可以在每次的迭代过程中利用部分样本代替所有的样本呢？基于这样的思想，便出现了mini-batch的概念。&lt;br&gt;假设训练集中的样本的个数为，则每个mini-batch只是其一个子集，假设，每个mini-batch中含有个样本，这样，整个训练数据集可以分为个mini-batch。&lt;/p&gt;
&lt;p&gt;{foreachωinΩ:θ:=θ−α1b∑(h(x)−y)x}for(k=1,2…m/b)&lt;/p&gt;
&lt;h2 id=&quot;stochastic-gradient-descent&quot;&gt;&lt;a href=&quot;#stochastic-gradient-descent&quot; class=&quot;headerlink&quot; title=&quot;stochastic gradient descent&quot;&gt;&lt;/a&gt;stochastic gradient descent&lt;/h2&gt;&lt;p&gt;随机梯度下降算法(stochastic gradient descent)可以看成是mini-batch gradient descent的一个特殊的情形，即在随机梯度下降法中每次仅根据一个样本对模型中的参数进行调整，等价于上述的b=1情况下的mini-batch gradient descent，即每个mini-batch中只有一个训练样本。&lt;br&gt;随机梯度下降法的优化过程为： &lt;/p&gt;
&lt;p&gt;{foreachx:θ:=θ−α(h(x)−y)x}&lt;/p&gt;
&lt;h2 id=&quot;online-gradient-descent&quot;&gt;&lt;a href=&quot;#online-gradient-descent&quot; class=&quot;headerlink&quot; title=&quot;online gradient descent&quot;&gt;&lt;/a&gt;online gradient descent&lt;/h2&gt;&lt;p&gt;对于互联网上的应用来说，数据的获取变得实时，例如推荐中，系统希望能够根据用户的实时的信息对模型进行调整，这样就产生了在线学习，在线学习(Online Learning)算法就是充分利用实时数据的一个训练算法。&lt;/p&gt;
&lt;p&gt;在线梯度下降法(Online gradient descent)对于所有训练数据只用一次，然后丢弃。每次根据实时的数据计算梯度，进而调整模型中的参数。&lt;/p&gt;
&lt;h1 id=&quot;python实现&quot;&gt;&lt;a href=&quot;#python实现&quot; class=&quot;headerlink&quot; title=&quot;python实现&quot;&gt;&lt;/a&gt;python实现&lt;/h1&gt;&lt;p&gt;下面代码是逻辑回归中的随机梯度下降法的代码，具体请见&lt;a href=&quot;http://localhost:4000/2016/04/09/logistic%E5%AE%9E%E7%8E%B0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;逻辑回归&lt;/a&gt;&lt;br&gt;```python&lt;/p&gt;
&lt;p&gt;def SGD(self, dataMatrix, classLabels, alpha， function):&lt;br&gt;    ‘’’根据训练数据拟合模型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;参数
------------
dataMatrix:
    训练样本属性矩阵
    类型：array
classLabels：
    训练样本标签
    类型：list
alpha:
    步长
function:
    目标函数的一阶导

&amp;apos;&amp;apos;&amp;apos;
row,col = dataMatrix.shape
weights = ones(col)   #初始化权值矩阵2
diff = weights
j = 0 #迭代次数
while(abs(max(diff))&amp;gt;0.01):
    dataIndex = range(row)
    for i in range(row):
        randIndex = int(random.uniform(0,len(dataIndex)))#随机选取训练对象
        h = function(sum(dataMatrix[randIndex]*weights))#矩阵
        error = classLabels[randIndex] - h

        diff = weights
        weights = weights + alpha * error * dataMatrix[randIndex]
        diff = weights - diff
        j += 1
        del(dataIndex[randIndex])
self.weights = weights
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;梯度下降法主要应用与找到最小值，是求解&lt;strong&gt;无约束最优化&lt;/strong&gt;问题的一种最常用的方法。这里求解的是凸优化问题，如果不是凸优化，那么使用梯度下降法只能找到局部最优解。&lt;br&gt;举一个例子，假设你正在山坡上，也就是开始的点上面，你&lt;strong&gt;只能看到周围1mm&lt;/strong&gt;的地方，你想要最快到达最低点，你怎么办？正常人应该会想，从周围1mm范围内最低的点走，肯定会走越低的。有人说，如果地上有一个坑，那就一直在坑里吗？这个问题…就是非凸优化的问题啦，不较真不较真啦。&lt;br&gt;&lt;img src=&quot;http://i3.piimg.com/031bc97949ed0128.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="梯度下降" scheme="http://yoursite.com/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
      <category term="凸优化问题" scheme="http://yoursite.com/tags/%E5%87%B8%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1852 Ants 挑战程序设计竞赛</title>
    <link href="http://yoursite.com/2016/04/13/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93POJ-1852-Ants/"/>
    <id>http://yoursite.com/2016/04/13/每天一道POJ-1852-Ants/</id>
    <published>2016-04-12T22:54:37.000Z</published>
    <updated>2016-04-13T22:08:01.391Z</updated>
    
    <content type="html">&lt;p&gt;Ants:Lcm长的杆子上有n只蚂蚁，蚂蚁以1cm的速度向左或者向右爬行，碰见就转向，知道每只蚂蚁距离杆子左端的距离x，不知道当前方向，计算所有蚂蚁落下竿子所需要的最短时间和最长时间。&lt;/p&gt;
&lt;p&gt;首先想到的是穷举法，枚举所有蚂蚁的初始朝向组合，可以利用递归实现，但是复杂度太高。观察这题，蚂蚁相遇会变成什么样子？如果1号蚂蚁跟2号蚂蚁碰到了，转向爬行，不纠结具体哪只蚂蚁，知道两只蚂蚁类似于交错爬行。每只蚂蚁都是独立运动的，所以每只蚂蚁都是独立运动，所以要求最长时间，只要求蚂蚁到竿子端点的最大距离就好了。&lt;br&gt;换个角度，发现整个世界都变了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; Max(a, b) a&amp;gt;b?a:b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; Min(a, b) a&amp;lt;b?a:b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; T, m, n, k, minT=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, maxT=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//T多少输入，m杠子长度，n蚂蚁个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;                                                                       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d%d&quot;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;n--;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minT = Min(minT, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxT = Max(maxT, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d %d\n&quot;&lt;/span&gt;, minT, maxT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Ants:Lcm长的杆子上有n只蚂蚁，蚂蚁以1cm的速度向左或者向右爬行，碰见就转向，知道每只蚂蚁距离杆子左端的距离x，不知道当前方向，计算所有蚂蚁落下竿子所需要的最短时间和最长时间。&lt;/p&gt;
&lt;p&gt;首先想到的是穷举法，枚举所有蚂蚁的初始朝向组合，可以利用递归实现，但是复杂度太高。观察这题，蚂蚁相遇会变成什么样子？如果1号蚂蚁跟2号蚂蚁碰到了，转向爬行，不纠结具体哪只蚂蚁，知道两只蚂蚁类似于交错爬行。每只蚂蚁都是独立运动的，所以每只蚂蚁都是独立运动，所以要求最长时间，只要求蚂蚁到竿子端点的最大距离就好了。&lt;br&gt;换个角度，发现整个世界都变了。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="挑战程序设计" scheme="http://yoursite.com/tags/%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>python&amp;R机器学习速查表</title>
    <link href="http://yoursite.com/2016/04/12/python-R%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <id>http://yoursite.com/2016/04/12/python-R机器学习速查表/</id>
    <published>2016-04-11T23:25:29.000Z</published>
    <updated>2016-04-12T23:47:27.946Z</updated>
    
    <content type="html">&lt;p&gt;原文：&lt;a href=&quot;http://www.analyticsvidhya.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.analyticsvidhya.com/&lt;/a&gt;&lt;br&gt;我个人对机器学习特别感兴趣，让机器能够自动的学习经验，听起来就特别的有意思，R我并不常用，我用的最多的还是python中的scikit-learn的库，但是这两个都是机器学习、数据挖掘中十分常用的东西。&lt;br&gt;下面这些速查表能让更多的人成为机器学习的支持者。这是10个最常用的机器学习算法，这些算法使用了Python和R代码。考虑到机器学习在构建模型中的应用，这些速查表可以很好作为编码指南帮助你学好这些机器学习算法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://i1.wp.com/www.analyticsvidhya.com/wp-content/uploads/2015/09/1.jpg?w=1017&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.analyticsvidhya.com/&quot;&gt;http://www.analyticsvidhya.com/&lt;/a&gt;&lt;br&gt;我个人对机器学习特别感兴趣，让机器能够自动的学习经验，听起来就特别的有意思，R我并不常用，我用的最多的还是python中的scikit-learn的库，但是这两个都是机器学习、数据挖掘中十分常用的东西。&lt;br&gt;下面这些速查表能让更多的人成为机器学习的支持者。这是10个最常用的机器学习算法，这些算法使用了Python和R代码。考虑到机器学习在构建模型中的应用，这些速查表可以很好作为编码指南帮助你学好这些机器学习算法。&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>图像分割综述</title>
    <link href="http://yoursite.com/2016/04/11/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/"/>
    <id>http://yoursite.com/2016/04/11/图像分割/</id>
    <published>2016-04-11T05:19:34.000Z</published>
    <updated>2016-04-13T08:33:36.420Z</updated>
    
    <content type="html">&lt;p&gt;图像分割是什么东西？根据字面意思就是将图像中的某块区域分割出来。至于分割测程度可做什么样子的分割则要取决于问题，如何做分割则需要取决于图像的灰度、位置信息、边（线，曲线等）、颜色、纹理和形状等特征把图像划分成若干互不交迭的区域。更精确的说，图像分割就是将每一个像素点贴上标签，而相同标签的像素点具有共同的特征。这里先对图像分割方法做一个总体的介绍，后面再对某些算法做具体的学习和了解。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h1&gt;&lt;p&gt;以下是图像分割的具体应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机器视觉&lt;/li&gt;
&lt;li&gt;医学图像&lt;ul&gt;
&lt;li&gt;定位肿瘤或者其他异常&lt;/li&gt;
&lt;li&gt;测量组织体积&lt;/li&gt;
&lt;li&gt;诊断解剖学上的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物体检测&lt;/li&gt;
&lt;li&gt;识别任务&lt;/li&gt;
&lt;li&gt;交通控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面列出图像分割中的主流的算法和技术.如果想要更好的解决领域分割的问题，都必须要结合一定的领域知识。&lt;/p&gt;
&lt;h1 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h1&gt;&lt;h2 id=&quot;基于阈值的方法&quot;&gt;&lt;a href=&quot;#基于阈值的方法&quot; class=&quot;headerlink&quot; title=&quot;基于阈值的方法&quot;&gt;&lt;/a&gt;基于阈值的方法&lt;/h2&gt;&lt;p&gt;　　阈值法的基本思想是基于图像的灰度特征来计算一个或多个灰度阈值，并将图像中每个像素的灰度值与阈值相比较，最后将像素根据比较结果分到合适的类别中。最近CT图像中阈值法有不错的发展。这个方法最关键的地方在于选取阈值（或者多个阈值）。通用的方法包括：最大熵方法，Otsu’s方法，或者k均值聚类，会受到到光照个应用的影响。&lt;/p&gt;
&lt;h2 id=&quot;基于聚类的方法&quot;&gt;&lt;a href=&quot;#基于聚类的方法&quot; class=&quot;headerlink&quot; title=&quot;基于聚类的方法&quot;&gt;&lt;/a&gt;基于聚类的方法&lt;/h2&gt;&lt;p&gt;  基于k均值算法是一种迭代方法，将一幅图划分成k个聚类。思想是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选取k个中心&lt;/li&gt;
&lt;li&gt;将每个像素点划分到最近的中心点&lt;/li&gt;
&lt;li&gt;重新计算每一类的中心，重新进行第二步&lt;/li&gt;
&lt;li&gt;重复2-3次知道收敛&lt;br&gt;聚这个方法在于选取聚类中心和类的个数。[2]&lt;br&gt;还有一种是基于双分类的方法，利用像素点的三个特征：位置和亮度变化。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;基于直方图的方法&quot;&gt;&lt;a href=&quot;#基于直方图的方法&quot; class=&quot;headerlink&quot; title=&quot;基于直方图的方法&quot;&gt;&lt;/a&gt;基于直方图的方法&lt;/h2&gt;&lt;p&gt;　　所谓的直方图，就是计算一幅图的所有像素点的直方图，找到直方图中的峰和谷来确定图像中的簇。有一个改进就是递归求图像中的集群，可以分成更小的簇。基于直方图的方法能够很好的适应与多帧的情况，此方法可以对静态环境中的活动的对象的分割，进行视频跟踪。&lt;/p&gt;
&lt;h2 id=&quot;基于边检测的方法&quot;&gt;&lt;a href=&quot;#基于边检测的方法&quot; class=&quot;headerlink&quot; title=&quot;基于边检测的方法&quot;&gt;&lt;/a&gt;基于边检测的方法&lt;/h2&gt;&lt;p&gt;　　所谓边缘是指图像中两个不同区域的边界线上连续的像素点的集合，是图像局部特征不连续性的反映，体现了灰度、颜色、纹理等图像特性的突变。通常情况下，基于边缘的分割方法指的是基于灰度值的边缘检测，它是建立在边缘灰度值会呈现出阶跃型或屋顶型变化这一观测基础上的方法。&lt;br&gt;    该方法是基于不同区域边界的一个强烈强度、颜色、亮度等的一个挑战。边缘检测是其他分割方法的基础。&lt;/p&gt;
&lt;h2 id=&quot;基于区域的方法&quot;&gt;&lt;a href=&quot;#基于区域的方法&quot; class=&quot;headerlink&quot; title=&quot;基于区域的方法&quot;&gt;&lt;/a&gt;基于区域的方法&lt;/h2&gt;&lt;p&gt; 　　基于区域的方法的核心猜想就是一个区域的相邻像素具有相同的值。最常用的方法就是比较一个像素点与周围像素点。&lt;br&gt; 　　一种区域增长法是种子区域生长法。这种方法是一组代表不同生长区域的种子像素开始，接下来将种子像素邻域里符合条件的像素合并到种子像素所代表的生长区域中，并将新添加的像素作为新的种子像素继续合并过程，直到找不到符合条件的新像素为止。该方法的关键是选择合适的初始种子像素以及合理的生长准则。&lt;br&gt; 　　另一种区域法是非种子区域增长方法。这种方法不需要直接种子，先选取一个种子，这个区域并不影响最终的结果。然后按照种子生长法找到最近邻，相似性如果小于阈值T，则加入区域$A_{i}$, 否则该点被认为不属于现在任何种子，将这个点作为新的种子。&lt;br&gt; 　　区域分裂合并法（Gonzalez，2002）的基本思想是首先将图像任意分成若干互不相交的区域，然后再按照相关准则对这些区域进行分裂或者合并从而完成分割任务，该方法既适用于灰度图像分割也适用于纹理图像分割。&lt;/p&gt;
&lt;h2 id=&quot;基于偏微分的方法&quot;&gt;&lt;a href=&quot;#基于偏微分的方法&quot; class=&quot;headerlink&quot; title=&quot;基于偏微分的方法&quot;&gt;&lt;/a&gt;基于偏微分的方法&lt;/h2&gt;&lt;p&gt;　　所谓的偏微分方程（PDE)的方法就是使用数值方法求解偏微分方程来实现对图像分割，中心思想就是求解根据具体任务定义的损失函数最小的初始曲线。曲线传播就是在这类方法中特别流行。广泛应用与对象的提取、目标跟踪。&lt;/p&gt;
&lt;h2 id=&quot;基于图论的分割方法&quot;&gt;&lt;a href=&quot;#基于图论的分割方法&quot; class=&quot;headerlink&quot; title=&quot;基于图论的分割方法&quot;&gt;&lt;/a&gt;基于图论的分割方法&lt;/h2&gt;&lt;p&gt;　　此类方法把图像分割问题与图的最小割（min cut）问题相关联。首先将图像映射为带权无向图G=&lt;v，e&gt;，图中每个节点N∈V对应于图像中的每个像素，每条边∈E连接着一对相邻的像素，边的权值表示了相邻像素之间在灰度、颜色或纹理方面的非负相似度。而对图像的一个分割s就是对图的一个剪切，被分割的每个区域C∈S对应着图中的一个子图。而分割的最优原则就是使划分后的子图在内部保持相似度最大，而子图之间的相似度保持最小。基于图论的分割方法的本质就是移除特定的边，将图划分为若干子图从而实现分割。目前所了解到的基于图论的方法有GraphCut，GrabCut和Random Walk等。&lt;br&gt;＃＃　基于能量泛函的分割方法&lt;br&gt;  该类方法主要指的是活动轮廓模型（active contour model）以及在其基础上发展出来的算法，其基本思想是使用连续曲线来表达目标边缘，并定义一个能量泛函使得其自变量包括边缘曲线，因此分割过程就转变为求解能量泛函的最小值的过程，一般可通过求解函数对应的欧拉(Euler．Lagrange)方程来实现，能量达到最小时的曲线位置就是目标的轮廓所在。按照模型中曲线表达形式的不同，活动轮廓模型可以分为两大类：参数活动轮廓模型（parametric active contour model）和几何活动轮廓模型（geometric active contour model）。&lt;br&gt;  参数活动轮廓模型是基于Lagrange框架，直接以曲线的参数化形式来表达曲线，最具代表性的是由Kasset a1(1987)所提出的Snake模型。该类模型在早期的生物图像分割领域得到了成功的应用，但其存在着分割结果受初始轮廓的设置影响较大以及难以处理曲线拓扑结构变化等缺点，此外其能量泛函只依赖于曲线参数的选择，与物体的几何形状无关，这也限制了其进一步的应用。&lt;br&gt;  几何活动轮廓模型的曲线运动过程是基于曲线的几何度量参数而非曲线的表达参数，因此可以较好地处理拓扑结构的变化，并可以解决参数活动轮廓模型难以解决的问题。而水平集（Level Set）方法（Osher，1988）的引入，则极大地推动了几何活动轮廓模型的发展，因此几何活动轮廓模型一般也可被称为水平集方法。&lt;/v，e&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zouxy09/article/details/8534954&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/zouxy09/article/details/8534954&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Image_segmentation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;图像分割是什么东西？根据字面意思就是将图像中的某块区域分割出来。至于分割测程度可做什么样子的分割则要取决于问题，如何做分割则需要取决于图像的灰度、位置信息、边（线，曲线等）、颜色、纹理和形状等特征把图像划分成若干互不交迭的区域。更精确的说，图像分割就是将每一个像素点贴上标签，而相同标签的像素点具有共同的特征。这里先对图像分割方法做一个总体的介绍，后面再对某些算法做具体的学习和了解。&lt;br&gt;
    
    </summary>
    
      <category term="图像处理" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="图像分割" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>codecraft失败者总结</title>
    <link href="http://yoursite.com/2016/04/11/codecraft%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/04/11/codecraft总结/</id>
    <published>2016-04-11T02:00:38.000Z</published>
    <updated>2016-04-13T10:30:51.527Z</updated>
    
    <content type="html">&lt;p&gt;3月中下旬的时候，听同学说有一个华为的比赛，叫codecraft。赛题是：&lt;/p&gt;
&lt;p&gt;未来网络·寻路&lt;br&gt;赛题源自“未来网络”业务发放中的路由计算问题。算路问题属于基础算法问题，在图论、网络、交通&lt;br&gt;等各个方面均有着广泛的研究与运用，里面不乏一些经典的算法，例如最短路中的广度优先搜索，Dijkstra算法等。网络算路问题的更优算法实现对于网络资源高效配置具有重要价值。&lt;br&gt;技术领域：c、c++、JAVA&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;当时听到这个消息，听心动的，三月下旬找了一个c++比较牛的队友，决定做这个比赛。一开始商量对策，我们两个人的算法功底都不行，面对面商量的时候没有商量出什么好的对策出来，再加上我c++功底很差，长时间没有使用，很多基础的东西都忘记了，也暴露出我的基础还比较薄弱。&lt;br&gt;后来我用python将算法写出来了，使用的是最短路径，从startpoint开始计算到下一个keypoint的最短路径，按照一定的概率选择下一个去的点，重复直到到达end点。重复多次，选取路径最短的路。借鉴的是随机森林的想法，建立多条随机路径，选择最优的那个。后来想想，这个算法太××了，节点少还好，节点多了完全没有办法找到最优路径，而且时间复杂度还很大。&lt;br&gt;当时写完算法，还没有意识到，就将算法给了那位同学，准备用boost graph library库，结果他不怎么会用，就悲催了，他一直在试探，好几天都没有处理（他比较忙这个也是一个客观因素）。最后智能自己上手，慢慢摸索，找到了boost graph library求最短路径的方法使用，结果快要到截止日期了（总共就没花几个晚上）。意识到时间复杂度跟效率太低，这个时候代码已经编写到一半了，现在改算法已经来不及了。。。。&lt;br&gt;总结如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;做程序员基础的数据结构跟算法的功底一定要强，这个方面我一定要加强&lt;/li&gt;
&lt;li&gt;程序员就像工匠，编程语言就是工匠手中的工具，想法再好，算法再厉害，不会用工具将这些算法实现处理，也是白瞎。&lt;/li&gt;
&lt;li&gt;想到一个算法之后，一定要在纸上演算一遍，计算时间和空间复杂度，否则实现代码的成本太大，等意识到算法效率跟复杂度达不到要求，就白费功夫了&lt;/li&gt;
&lt;li&gt;再次强调，算法一定要在纸上验算一下，写下伪代码，然后再具体编写代码，这样各种开销会小很多！！！！！&lt;/li&gt;
&lt;li&gt;关于专注力，我并没有将这个比赛放在心上，所以并没有花费太多时间在这件事上，因此也就导致最后的结果并不好，这是在意料之中的，但是如果不想做一件事，那么就不要接下来，接下来了就要全心全意的完成他！！！！将一件事做的完美这个才是最重要的。&lt;/li&gt;
&lt;li&gt;关于团队合作，除了第一天交流算法，后面十几天完全没有太多的交流，这个是十分的错误！！！最好两天或者三天就交流一次！！！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然算法比较烂，还是附上，以后可能还有用，10000个小时法则，重点就在这10000个小时的积累。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;239&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Created on Wed Mar 30 20:20:51 2016&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@author: wq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Created on Fri Mar 25 08:01:56 2016&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@author: wq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import networkx as nx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import matplotlib.pyplot as plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import random  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#绘图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def draw(DG, subsub_set , subset, start, end):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pos=nx.spring_layout(DG) # positions for all nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nx.draw_networkx_nodes(DG,pos,nodelist =subsub_set,  node_size=500)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nx.draw_networkx_nodes(DG,pos,nodelist =subset,  node_size=500, node_color=&amp;apos;b&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nx.draw_networkx_nodes(DG,pos,nodelist =[start],  node_size=500, node_color=&amp;apos;g&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nx.draw_networkx_nodes(DG,pos,nodelist =[end],  node_size=500, node_color=&amp;apos;y&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # edges&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nx.draw_networkx_edges(DG,pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # labels&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nx.draw_networkx_labels(DG,pos,font_size=20,font_family=&amp;apos;sans-serif&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plt.axis(&amp;apos;off&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#    plt.savefig(&amp;quot;weighted_graph.png&amp;quot;) # save as png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plt.show() # display&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#按照某一个概率抽取，如some_list = [1,2,3] probabilities = [0.2, 0.3, 0.5] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def randomPick(some_list, probabilities):  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x = random.uniform(0,1)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cumulative_probability = 0.0  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for item, item_probability in zip(some_list, probabilities):  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cumulative_probability += item_probability  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if x &amp;lt; cumulative_probability:break  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return item  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#获得路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def getRoute(G, subset, start):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    G不包括终点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    G1与G一样，但是在函数体中不被操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    G为networkx图模型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subset为关键子集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start为起始点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    route为返回的路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    score为权值得分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    该程序采用递归随机贪心算法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start_point = start #运算的起点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subset_buf = subset[:] #子集的备份&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    score = 0 #权值得分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    route = [start] #路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    G1 = G.copy() #图的复本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #subset_weight = [] #start_point到邻居权值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    has_go_subset = [start]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next_route = &amp;#123;&amp;#125;#某一节点不可达的节点list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #print start_point, subset_buf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next_route[start_point] = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for i in subset:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next_route[i] = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #print &amp;apos;start&amp;apos;, G.nodes(), subset, start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for deep in xrange(len(subset)*len(subset)/4):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #print &amp;apos;subset_buf&amp;apos;, subset_buf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subset_no_next = next_route[start_point]     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subset_buf_next = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subset_weight = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for i in subset_buf:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if i in subset_no_next:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    #判断这条路是不是走不通了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    subset_weight.append(nx.shortest_path_length(G1, source = start_point, target = i , weight = &amp;apos;weight&amp;apos;))           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    subset_buf_next.append(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            except:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                next_route[start_point].append(i)#如果不可达，则加入该节点不可达List中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #subset_weight.append(10000)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #将路径的权值转换为概率，例如subset = [x1, x2, x3] subset_weight = [w1, w2, w3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #subset_probability = [(1/x1)/(1/x1+1/x2+1/x3), (1/x2)/(1/x1+1/x2+1/x3), (1/x3)/(1/x1+1/x2+1/x3)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #求概率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #print &amp;apos;subset no next&amp;apos;, subset_no_next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #print &amp;apos;subset weight&amp;apos;, subset_weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #print &amp;apos;subset next&amp;apos;, subset_buf_next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if len(subset_buf_next) == 0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                start_point = has_go_subset.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            except:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return route, 100000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            route = route[:route.index(start_point)+1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            G1 = G.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            G1.remove_nodes_from(route[:route.index(start_point)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            subset_buf = [x for x in subset if x not in route]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accu_buf = reduce(lambda x, y:x*y, subset_weight)    #权值求和&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sum_buf = reduce(lambda x, y: x + accu_buf/y, subset_weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subset_probability = map(lambda x:accu_buf/(x*sum_buf), subset_weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #print &amp;apos;subset_probability&amp;apos;, subset_probability&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #按照subset_probability中的概率抽取next_point，将start到next_point的路径加入到route中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #print &amp;apos;subset_buf_next&amp;apos;, subset_buf_next        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next_point = randomPick(subset_buf_next, subset_probability)    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #print next_route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #print &amp;apos;find&amp;apos;, G1.nodes(), start_point, next_point, route, subset_buf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            route_buf = nx.shortest_path(G1, start_point, next_point, weight = &amp;apos;weight&amp;apos;)  #如果本次没有找到next_point的路径，回退一下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #print &amp;apos;next point&amp;apos;, next_point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #print &amp;apos;route_buf&amp;apos;, route_buf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        except nx.exception.NetworkXNoPath:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           # print G1.nodes(), start_point, next_point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #print &amp;apos;NoPath&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if len(has_go_subset) == 0 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return route, 100000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                next_route[start_point].append(next_point)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                start_point = has_go_subset.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                route = route[:route.index(start_point)+1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                G1 = G.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                G1.remove_nodes_from(route[:-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                subset_buf = [x for x in subset if x not in route]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #print &amp;apos;ba&amp;apos;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #except KeyError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #print &amp;apos;keyerror&amp;apos;, G1.nodes(),route,  start_point, next_point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        G1.remove_nodes_from(route_buf[:-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       # print &amp;apos;route&amp;apos;, route, &amp;apos;route_buf&amp;apos;, route_buf        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        route = route + route_buf[1:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #print &amp;apos;after route&amp;apos;, route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #计算总得分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        score = score + subset_weight[subset_buf_next.index(next_point)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #将路径中已经有的点从subset中去除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subset_buf = [x for x in subset if x not in route]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        has_go_subset.append(next_point)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        start_point = route[-1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       # print &amp;apos;start_point&amp;apos;, start_point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #如果subset为空，则返回route, score&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if len(subset_buf) == 0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           # print &amp;apos;get&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return route, score&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #print next_route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return route, score&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__ ==&amp;apos;__main__&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result_route=[]    #最终结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result_weight = 100000   #最终得分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for j in xrange(10):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #打开文件，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result_route=[]    #最终结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result_weight = 100000   #最终得分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        topo_file = open(&amp;apos;case/case&amp;apos; + str(j) + &amp;apos;/topo.csv&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        demand_file = open(&amp;apos;case/case&amp;apos; + str(j) + &amp;apos;/demand.csv&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        demand = demand_file.read().split(&amp;apos;,&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        start_point = int(demand[0])#开始点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end_point = int(demand[1])#结束点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subset = [int(x) for x in demand[2].split(&amp;apos;|&amp;apos;)]#关键点子集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #构建图模型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SG = nx.DiGraph()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SG.add_nodes_from(subset)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        graph = [line.strip().split(&amp;apos;,&amp;apos;)[1:4] for line in topo_file]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        graph_int = [tuple([int(x), int(y), float(z)]) for (x, y, z) in graph]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DG = nx.DiGraph()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DG.add_weighted_edges_from(graph_int)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #全集减去子集，这里是未来方便图的可视化表示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subsub_set = [x[0] for x in graph_int if( x[0] not in subset)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #draw(DG, subsub_set, subset, start_point, end_point)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #print nx.shortest_path(DG, source = 2, target = 19)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #构建去除end_point的图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        G1 = DG.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        G1.remove_node(end_point)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #循环4×length of subset次&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for i in xrange(40):    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #print i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #获得路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            route, weight = getRoute(G1, subset, start = start_point)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #except:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #print &amp;apos;2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #找route中的最后一个点到end_point的路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            G3 = DG.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if weight == 10000:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result_weight = 10000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #构建将route中除最后一个node外的点全部删除的图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            G3.remove_nodes_from(route[:-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #寻找最短路径和最短路径的权值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            try:           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result = nx.shortest_path(G3, route[-1], end_point, weight = &amp;apos;weight&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                weight = weight + nx.shortest_path_length(G3, route[-1], end_point, weight = &amp;apos;weight&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #本次路径        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                route=route + result[1:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            except:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #如果本次路径权值最短，输出为最终路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if result_weight &amp;gt; weight:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result_weight = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result_route = route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if result_weight &amp;gt;= 10000:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print &amp;apos;case&amp;apos; + str(j) + &amp;apos;不可达&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;apos;case&amp;apos;,i, &amp;apos;  &amp;apos;,start_point, &amp;apos; - &amp;apos;, end_point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;apos;case&amp;apos; + str(j), result_weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;apos;case&amp;apos; + str(j) +&amp;apos;  route is&amp;apos;, result_route&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;3月中下旬的时候，听同学说有一个华为的比赛，叫codecraft。赛题是：&lt;/p&gt;
&lt;p&gt;未来网络·寻路&lt;br&gt;赛题源自“未来网络”业务发放中的路由计算问题。算路问题属于基础算法问题，在图论、网络、交通&lt;br&gt;等各个方面均有着广泛的研究与运用，里面不乏一些经典的算法，例如最短路中的广度优先搜索，Dijkstra算法等。网络算路问题的更优算法实现对于网络资源高效配置具有重要价值。&lt;br&gt;技术领域：c、c++、JAVA&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn中的逻辑回归</title>
    <link href="http://yoursite.com/2016/04/09/scikit-learn%E4%B8%AD%E7%9A%84%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E4%B8%80/"/>
    <id>http://yoursite.com/2016/04/09/scikit-learn中的逻辑回归-一/</id>
    <published>2016-04-09T04:30:28.000Z</published>
    <updated>2016-04-16T00:38:47.675Z</updated>
    
    <content type="html">&lt;p&gt;scikit-learn是python的十分优秀的机器学习库，是数据挖掘和数据分析简单和有效的工具。官方链接为：&lt;a href=&quot;http://scikit-learn.org/stable/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://scikit-learn.org/stable/index.html&lt;/a&gt;&lt;br&gt;一直以来都在看数据挖掘跟机器学习，都比较零散，并且只限于理论部分，现在重新系统完整的学习一下相关的算法，并使用博客记录下来，通过理论、实现和scikit-learning的应用三维一体。本节主要介绍scikit-learn中逻辑归回的接口。&lt;br&gt;逻辑回归，尽管它的名字有“回归”两个字，但是这是一个线性分类器，而不是回归。Logistic回归载文献中也被称为Logit回归，对数线性分类器或最大熵分类器。关于最大熵分类器，将Logistic模型写成似然函数的时候，就转换成立求解最大熵了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;class sklearn.linear_model.LogisticRegression(penalty=’l2’, dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver=’liblinear’, max_iter=100, multi_class=’ovr’, verbose=0, warm_start=False, n_jobs=1)&lt;/p&gt;
&lt;p&gt;参数见官方网站&lt;a href=&quot;http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LogisticRegression网站&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;正则项&quot;&gt;&lt;a href=&quot;#正则项&quot; class=&quot;headerlink&quot; title=&quot;正则项&quot;&gt;&lt;/a&gt;正则项&lt;/h1&gt;&lt;p&gt;分类问题的时候可以使用L2或L1正则化，正则化为了让模型具有更佳的泛化能力，降低模型的复杂度。&lt;br&gt;二分类L2正则化损失函数如下：&lt;br&gt;&lt;img src=&quot;http://scikit-learn.org/stable/_images/math/96fe247fe9465d26af15706141dc22e598ac7826.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;同样的，L1正则化损失函数如下：&lt;br&gt;&lt;img src=&quot;http://scikit-learn.org/stable/_images/math/3fb9bab302e67df4a9f00b8df259d326e01837fd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;优化求解&quot;&gt;&lt;a href=&quot;#优化求解&quot; class=&quot;headerlink&quot; title=&quot;优化求解&quot;&gt;&lt;/a&gt;优化求解&lt;/h1&gt;&lt;p&gt;求解Logistic回归，这里面有四种方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“LibLinear”:Liblinear则是国立台湾大学的chih-JenLin博士创建的，主要是应对large-scale的data classification，因为linear分类器的训练比非线性分类器的训练计算复杂度要低很多，时间也少很多，而且在large scale data上的性能和非线性的分类器性能相当，所以Liblinear是针对大数据而生的。这位博士创建的另一个十分有名的库就是Libsvm。&lt;/li&gt;
&lt;li&gt;“newton-cg”:一种解决解决非线性优化问题的方法。&lt;/li&gt;
&lt;li&gt;“lbfgs”:LBFGS算法比较适合载大规模的数值计算中，具备牛顿法收敛速度快的它的，但不需要牛顿法那样存储Hesse矩阵，因此节省了大量的空间以及计算资源。参考[1]、[2]&lt;/li&gt;
&lt;li&gt;“SAG”:Stochastic Average Gradient descent随机平均梯度下降[3]。这是一种优化有限个平滑凸函数相加的和。与随机梯度下降（SG）方法相似，SAG方法的方法开销与函数的数量独立。时间复杂度从$O(1/\sqrt{2})$降低到$O(1/k)$.不能处理多分类问题，只限于L2惩罚函数，比其他的大数据（样本和特征数量比较多）解决方案要快。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“lbfgs”和”newton-cg”只支持L2乘法，对高维数据来说收敛更快。L1惩罚预测的权值更加离散。&lt;br&gt;“liblinear”是基于Liblinear中的坐标下降的方法。但是坐标下降载liblinear的实现不能学习多源模型。&lt;/p&gt;
&lt;p&gt;如何选择优化方法呢？且看下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;训练集&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;solver&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;小数据集或L1惩罚项&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;“liblinear”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多项损失&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;“lbfgs”或”newton-cg”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大数据&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;”sag”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;大量数据集，也可以考虑使用SGDClassifier中’log’损失。&lt;/p&gt;
&lt;p&gt;下面代码逻辑回归的使用代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; linear_model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datasets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn.svm &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; l1_min_c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#加载数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iris = datasets.load_iris()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X = iris.data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y = iris.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X = X[y != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y = y[y != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X -= np.mean(X, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cs = l1_min_c(X, y, loss=&lt;span class=&quot;string&quot;&gt;&#39;log&#39;&lt;/span&gt;) * np.logspace(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;学习规则路径&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start = datetime.now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#初始化逻辑回归模型，c惩罚项步长的倒数，也就是上式中的C，惩罚项l1,tol停止条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clf = linear_model.LogisticRegression(C=&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, penalty=&lt;span class=&quot;string&quot;&gt;&#39;l1&#39;&lt;/span&gt;, tol=&lt;span class=&quot;number&quot;&gt;1e-6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#存储系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coefs_ = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; cs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clf.set_params(C=c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clf.fit(X, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coefs_.append(clf.coef_.ravel().copy())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#如果预测就用clf.predict(X)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;This took &quot;&lt;/span&gt;, datetime.now() - start)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coefs_ = np.array(coefs_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(np.log10(cs), coefs_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ymin, ymax = plt.ylim()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.xlabel(&lt;span class=&quot;string&quot;&gt;&#39;log(C)&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.ylabel(&lt;span class=&quot;string&quot;&gt;&#39;Coefficients&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.title(&lt;span class=&quot;string&quot;&gt;&#39;Logistic Regression Path&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.axis(&lt;span class=&quot;string&quot;&gt;&#39;tight&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;[1] &lt;a href=&quot;http://blog.sina.com.cn/s/blog_eb3aea990101gflj.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.sina.com.cn/s/blog_eb3aea990101gflj.html&lt;/a&gt;&lt;br&gt;[2] &lt;a href=&quot;http://blog.csdn.net/zhirom/article/details/38332111&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/zhirom/article/details/38332111&lt;/a&gt;&lt;br&gt;[3] &lt;a href=&quot;https://hal.inria.fr/hal-00860051/PDF/sag_journal.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;随机平均梯度下降&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;scikit-learn是python的十分优秀的机器学习库，是数据挖掘和数据分析简单和有效的工具。官方链接为：&lt;a href=&quot;http://scikit-learn.org/stable/index.html&quot;&gt;http://scikit-learn.org/stable/index.html&lt;/a&gt;&lt;br&gt;一直以来都在看数据挖掘跟机器学习，都比较零散，并且只限于理论部分，现在重新系统完整的学习一下相关的算法，并使用博客记录下来，通过理论、实现和scikit-learning的应用三维一体。本节主要介绍scikit-learn中逻辑归回的接口。&lt;br&gt;逻辑回归，尽管它的名字有“回归”两个字，但是这是一个线性分类器，而不是回归。Logistic回归载文献中也被称为Logit回归，对数线性分类器或最大熵分类器。关于最大熵分类器，将Logistic模型写成似然函数的时候，就转换成立求解最大熵了。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="逻辑回归" scheme="http://yoursite.com/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
      <category term="scikit-learning" scheme="http://yoursite.com/tags/scikit-learning/"/>
    
  </entry>
  
  <entry>
    <title>逻辑回归的实现</title>
    <link href="http://yoursite.com/2016/04/09/logistic%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/04/09/logistic实现/</id>
    <published>2016-04-09T03:55:59.000Z</published>
    <updated>2016-04-13T14:01:03.776Z</updated>
    
    <content type="html">&lt;p&gt;前面讲了logistic的理论部分，这里我参照《机器学习实战》写了logistic的实现部分。如果对logistic不清楚，请看&lt;a href=&quot;/2016/04/08/逻辑斯蒂（Logistic-回归/&quot;&gt;逻辑回归&lt;/a&gt;。&lt;br&gt;logistic算法全部过程。&lt;br&gt;&lt;img src=&quot;http://i3.piimg.com/0ddf886f38c92b17.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我建立了一个逻辑回归的类，类中包含三个主要函数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fit:拟合模型.&lt;/li&gt;
&lt;li&gt;predict：进行预测&lt;/li&gt;
&lt;li&gt;score：求错误率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据我使用预测患有疝病的马的存活问题。这里面的数据包含368个样本和28个特征。下面是详细代码，我的github上面有数据和代码:&lt;a href=&quot;https://github.com/allensummer/machineLearning/tree/master/logistic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;logistic regression&lt;/a&gt;&lt;br&gt;下面是具体代码，如果知道logistic原理，下面的代码并不难理解&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Created on Fri Apr  8 23:59:45 2016&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@author: wq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;逻辑回归&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;  *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LogisticRegression&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    二项逻辑回归模型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, alpha=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ---------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alpha,梯度下降迭代步长&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.alpha = alpha&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weights = []     &lt;span class=&quot;comment&quot;&gt;#模型权值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sigmoid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, inX)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#print inX&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+sum(exp(-inX)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, dataMatrix, classLabels)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;根据训练数据拟合模型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataMatrix:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            训练样本属性矩阵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            类型：array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classLabels：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            训练样本标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            类型：list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        row,col = dataMatrix.shape&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(self.weights) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            weights = ones(col)   &lt;span class=&quot;comment&quot;&gt;#初始化权值矩阵2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            weights = self.weights&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        diff = weights      &lt;span class=&quot;comment&quot;&gt;#权值变化矩阵，初始化为权值矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#迭代次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(abs(max(diff))&amp;gt;&lt;span class=&quot;number&quot;&gt;0.001&lt;/span&gt;):     &lt;span class=&quot;comment&quot;&gt;#当权值变化很小的时停止迭代。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dataIndex = range(row)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(row):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                alpha = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;/(self.alpha+i)+&lt;span class=&quot;number&quot;&gt;0.0001&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;#alpha随着每次迭代，下降。参数趋于稳定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                randIndex = int(random.uniform(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,len(dataIndex)))&lt;span class=&quot;comment&quot;&gt;#随机选取训练对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                h = self.sigmoid(sum(dataMatrix[randIndex]*weights))&lt;span class=&quot;comment&quot;&gt;#sigmoid求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                error = classLabels[randIndex] - h      &lt;span class=&quot;comment&quot;&gt;#误差项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                diff = weights      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                weights = weights + alpha * error * dataMatrix[randIndex]&lt;span class=&quot;comment&quot;&gt;#权值更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                diff = weights - diff                &lt;span class=&quot;comment&quot;&gt;#权值差异&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt;(dataIndex[randIndex])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weights = weights&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#print weights&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,dataList)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        训练的二项逻辑回归预测&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        --------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataList：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            待预测样本属性,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            类型：list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(self.weights) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; KeyError,(&lt;span class=&quot;string&quot;&gt;&quot;没有进行模型训练&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;#如果没有进行fit预测，抛出异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prob = self.sigmoid(sum(dataList*self.weights))&lt;span class=&quot;comment&quot;&gt;#概率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; prob &amp;gt; &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,dataMatrix, classLabels)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        评价模型性能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataMatrix:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            测试样本属性举证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            属性：array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classLabels:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            测试样本类别，这里只有1、0两类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            属性：list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ---------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errorRate：错误率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        numData = len(dataMatrix)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errorCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#行数记录，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; dataMatrix:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#print &#39;预测结果&#39;,self.predict(line)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#print &#39;样本标签&#39;,classLabels[j]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; int(self.predict(line)) != int(classLabels[j]):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                errorCount += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            j += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#print errorCount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errorRate = (float(errorCount)/numData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;the error rate of this test is: %f&quot;&lt;/span&gt; % errorRate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errorRate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__==&lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    frTrain = open(&lt;span class=&quot;string&quot;&gt;&#39;horseColicTraining.txt&#39;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;#读取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    frTest = open(&lt;span class=&quot;string&quot;&gt;&#39;horseColicTest.txt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#读取训练集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    trainingSet = []; trainingLabels = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; frTrain.readlines():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        line = line.strip().split(&lt;span class=&quot;string&quot;&gt;&#39;\t&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        trainingSet.append(map(float, line)[:&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        trainingLabels.append(float(line[&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#读取测试集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testSet = [];testLabels = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; frTest:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        line = line.strip().split(&lt;span class=&quot;string&quot;&gt;&#39;\t&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        testSet.append(map(float, line)[:&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        testLabels.append(line[&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#实例化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clf = LogisticRegression(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#迭代10次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clf.fit(array(trainingSet), trainingLabels)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clf.score(array(testSet), testLabels)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;《机器学习实战》&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前面讲了logistic的理论部分，这里我参照《机器学习实战》写了logistic的实现部分。如果对logistic不清楚，请看&lt;a href=&quot;/2016/04/08/逻辑斯蒂（Logistic-回归/&quot;&gt;逻辑回归&lt;/a&gt;。&lt;br&gt;logistic算法全部过程。&lt;br&gt;&lt;img src=&quot;http://i3.piimg.com/0ddf886f38c92b17.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="logistic实现" scheme="http://yoursite.com/tags/logistic%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>LDA浅显理解</title>
    <link href="http://yoursite.com/2016/04/08/LDA%E6%B5%85%E6%98%BE%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/04/08/LDA浅显理解/</id>
    <published>2016-04-08T13:52:25.000Z</published>
    <updated>2016-04-08T13:57:35.991Z</updated>
    
    <content type="html">&lt;p&gt;这一段时间在看LDA主题模型，这里说一下我对LDA的理解，抛开复杂的数学、概率论、机器机器学习算法，只说思路，其他内容以后再更加详细的写。&lt;br&gt;假设有一个机器人，他想写一篇文章,每篇文章包含N个词，那么他怎么写呢？？？&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151224215521383&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Unigram-model&quot;&gt;&lt;a href=&quot;#Unigram-model&quot; class=&quot;headerlink&quot; title=&quot;Unigram model&quot;&gt;&lt;/a&gt;Unigram model&lt;/h1&gt;&lt;p&gt;科学家A一开始这么设计，先给机器人读大量的文章，这样这个机器人的大脑中会有S个词，这些词组成了词向量$W=[w_1, w_2, w_3 …… w_S]$，每一个词都有相对应的概率$P=[p(w_1), p(w_2), p(w_3) …… p(w_S)$  。&lt;br&gt;算法如下：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;for i = 1 to N:&lt;br&gt; 　　choose a word $w_i～ p(W)$ &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;数学表示即：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;$p(w) = ∏ p(w n )$&lt;br&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201209/03/1346652013_8454.PNG&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1 id=&quot;Mixture-of-unigrams&quot;&gt;&lt;a href=&quot;#Mixture-of-unigrams&quot; class=&quot;headerlink&quot; title=&quot;Mixture of unigrams&quot;&gt;&lt;/a&gt;Mixture of unigrams&lt;/h1&gt;&lt;p&gt;科学家B觉得不应该这样，他认为机器人读的这些文章分成不同的主题$Z=[z_1, z_2 …… z_t]$，每个主题的概率为$P(Z)=[p(z_1), p(z_2), …… p(z_t))]$,第i主题下又有S个高频词向量$W=[w_1, w_2, w_3 …… w_S]$，每一个词都有相对应的概率$P=[p(w_1|z_i), p(w_2|z_i), p(w_3|z_i) …… p(w_S|z_i)$。&lt;br&gt;算法描述如下：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;choose a topic $z_i～p(Z);  &lt;/p&gt;
&lt;p&gt;for i = 1 to N&lt;br&gt;　　choose a word $w_i～ p(W|z_i)$&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;数学表示为：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;$p(w) = ∑ p(z) ∏ p(w n | z)&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230194155151&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;也就是说按照学习到的概率选择一个Topic,按照这个Topic下词的概率选择N个词。&lt;/p&gt;
&lt;h1 id=&quot;Probabilistic-lantent-semantic-indexinal-pLSI&quot;&gt;&lt;a href=&quot;#Probabilistic-lantent-semantic-indexinal-pLSI&quot; class=&quot;headerlink&quot; title=&quot;Probabilistic lantent semantic indexinal(pLSI)&quot;&gt;&lt;/a&gt;Probabilistic lantent semantic indexinal(pLSI)&lt;/h1&gt;&lt;p&gt;科学家C（Hoffman）认为应该一篇文档可以由多个主题（topic $Z=[z_1, z_2 …… z_t]$）混合而成，每个主题的概率为$P(Z)=[p(z_1), p(z_2), …… p(z_t))]$，而每个Topic都是词汇上的概率分布$P=[p(w_1|z_i), p(w_2|z_i), p(w_3|z_i) …… p(w_S|z_i)]$，文章中的每一个词都有固定的topic。&lt;br&gt;算法描述：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Choose parameter θ ～ p(θ)             #θ为选择出来的主题向量&lt;br&gt;for i = 1 to N&lt;br&gt;　　choose a topic $z_j ～ p(z|θ)$&lt;br&gt; 　　choose a word $w_k ～ p(w|z_j)$&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;数学表示即：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230193416158&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230194255120&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230200824920&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1 id=&quot;Lanton-Dirichlet-Allocation-LDA&quot;&gt;&lt;a href=&quot;#Lanton-Dirichlet-Allocation-LDA&quot; class=&quot;headerlink&quot; title=&quot;Lanton Dirichlet Allocation(LDA)&quot;&gt;&lt;/a&gt;Lanton Dirichlet Allocation(LDA)&lt;/h1&gt;&lt;p&gt;科学家D（David M. Blei）认为这个主题的概率分布、词汇的概率分布并不是固定的（与pLSA相比），应该是符合某一个分布，选取主题或词汇的时候，这个概率是动态变化的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;initialize $φ_{ni}^0$  := 1/k for all i and n&lt;br&gt;initialize $γ_i := α&lt;em&gt;i + N/k$ for all i and n&lt;br&gt;repeat&lt;br&gt;　for n = 1 to N&lt;br&gt;　　for i = 1 to k&lt;br&gt;　　　 $φ^{t+1}&lt;/em&gt;{ni} = β_{iw_n}exp(Ψ(γ_i^t ))$&lt;br&gt;　　normalize $φ&lt;em&gt;n^{t+1}$ to sum to 1.&lt;br&gt;　$γ&lt;/em&gt;{t+1} = α + ∑^N_{n=1} φ_n^{t+1}$&lt;br&gt;until convergence&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;数学公式如下：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230201004940&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230201044552&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230201221551&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;上述是我理解的LDA，一个机器人想要写一篇文章，那么先按照Dirichlet分布选择出主题向量，载这个主题向量的基础上，生成词汇。&lt;br&gt;使用LDA模型进行推断的时候，是倒过来的，由文档的词汇生成主题。因此LDA常常也用来做&lt;strong&gt;降维工具&lt;/strong&gt;。使用在语义分析，图像、文本分类等等&lt;/p&gt;
&lt;h1 id=&quot;pLSA与LDA对比&quot;&gt;&lt;a href=&quot;#pLSA与LDA对比&quot; class=&quot;headerlink&quot; title=&quot;pLSA与LDA对比&quot;&gt;&lt;/a&gt;pLSA与LDA对比&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;LDA&lt;/strong&gt;：假定语料库中共有M篇文章，每篇文章下的Topic的主题分布是一个从参数为的Dirichlet先验分布中采样得到的Multinomial分布，每个Topic下的词分布是一个从参数为的Dirichlet先验分布中采样得到的Multinomial分布。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230201221551&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pLSA&lt;/strong&gt;：对于某篇文章中的第n个词，首先从该文章中出现的每个主题的Multinomial分布（主题分布）中选择或采样一个主题，然后再在这个主题对应的词的Multinomial分布（词分布）中选择或采样一个词。不断重复这个随机生成过程，直到M篇文章全部生成完成。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230200824920&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;相关知识点&quot;&gt;&lt;a href=&quot;#相关知识点&quot; class=&quot;headerlink&quot; title=&quot;相关知识点&quot;&gt;&lt;/a&gt;相关知识点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;gamma函数&lt;/li&gt;
&lt;li&gt;Dirichlet分布&lt;/li&gt;
&lt;li&gt;共轭先验和贝叶斯框架&lt;/li&gt;
&lt;li&gt;EM模型&lt;/li&gt;
&lt;li&gt;MCMC、Gibbs采样&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;训练和推断&quot;&gt;&lt;a href=&quot;#训练和推断&quot; class=&quot;headerlink&quot; title=&quot;训练和推断&quot;&gt;&lt;/a&gt;训练和推断&lt;/h1&gt;&lt;p&gt;对于LDA模型，有两个目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;估计模型中的语料库中的主题Dirichlet分布和每个主题下的词汇的Dirichlet分布&lt;/li&gt;
&lt;li&gt;对于一篇新的文档，计算这篇文档的topic分布&lt;br&gt;训练过程：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230202705096&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;推断过程：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151230202758668&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;###参考资料&lt;br&gt;1、Blei, David M.; Ng, Andrew Y.; Jordan, Michael I. Latent Dirichlet allocation（LDA原始论文）：&lt;a href=&quot;http://www.jmlr.org/papers/volume3/blei03a/blei03a.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jmlr.org/papers/volume3/blei03a/blei03a.pdf&lt;/a&gt;&lt;br&gt;2、rickjin的LDA数学八卦（力荐，本文部分图片和公式来自于此文档）&lt;br&gt;网页版：&lt;a href=&quot;http://www.flickering.cn/tag/lda/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.flickering.cn/tag/lda/&lt;/a&gt;&lt;br&gt;PDF：&lt;a href=&quot;http://emma.memect.com/t/9756da9a47744de993d8df13a26e04e38286c9bc1c5a0d2b259c4564c6613298/LDA；&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://emma.memect.com/t/9756da9a47744de993d8df13a26e04e38286c9bc1c5a0d2b259c4564c6613298/LDA；&lt;/a&gt;&lt;br&gt;3、搜索背后的奥秘——浅谈语义主题计算：&lt;a href=&quot;http://www.semgle.com/search-engine-algorithms-mystery-behind-search-on-the-calculation-of-semantic-topic；&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.semgle.com/search-engine-algorithms-mystery-behind-search-on-the-calculation-of-semantic-topic；&lt;/a&gt;&lt;br&gt;4、LDA的相关论文、工具库：&lt;a href=&quot;http://site.douban.com/204776/widget/notes/12599608/note/287085506/；&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://site.douban.com/204776/widget/notes/12599608/note/287085506/；&lt;/a&gt;&lt;br&gt;5、LDA实现 &lt;a href=&quot;http://www.cs.princeton.edu/~blei/topicmodeling.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cs.princeton.edu/~blei/topicmodeling.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这一段时间在看LDA主题模型，这里说一下我对LDA的理解，抛开复杂的数学、概率论、机器机器学习算法，只说思路，其他内容以后再更加详细的写。&lt;br&gt;假设有一个机器人，他想写一篇文章,每篇文章包含N个词，那么他怎么写呢？？？&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151224215521383&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="-机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="LDA" scheme="http://yoursite.com/tags/LDA/"/>
    
  </entry>
  
  <entry>
    <title>大话逻辑回归</title>
    <link href="http://yoursite.com/2016/04/08/%E9%80%BB%E8%BE%91%E6%96%AF%E8%92%82%EF%BC%88Logistic-%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2016/04/08/逻辑斯蒂（Logistic-回归/</id>
    <published>2016-04-08T03:49:37.000Z</published>
    <updated>2016-04-09T04:22:08.532Z</updated>
    
    <content type="html">&lt;p&gt;在Machine Learning中，逻辑斯蒂回归（Logistic Regression）是十分经典的方法,简称LR，虽然名字叫回归，但是这是线性分类模型而不是回归模型。这里面涉及到一些知识点，包括极大似然估计，损失函数，梯度下降，正则化等&lt;!--逻辑斯特回归是对条件概率密度$P(x|C/_K)$建模的，也就是后验概率$P(C/_k)$,使用它们通过贝叶斯理论来计算后验概率$P(C/_k|x).--&gt;&lt;br&gt;这篇文章的主要目的，就是通过理论与实践相结合的方式讲解LR模型，在讲解的过程中，加深对LR的理解、相关概念的梳理和应用。这篇文章中需要一些基础的数学知识，如果我没有讲到的请自行百度。这篇文章以《统计学习方法》和AndrewNg的视频为基础，加上《PR&amp;amp;MR》以及网上的资料、论文整理而成。本人能力有限，细节处理上难免有不严谨的地方或者叙述不清的地方，请留言或者发邮件wang_qian010@163.com&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;逻辑斯蒂（logistic-函数&quot;&gt;&lt;a href=&quot;#逻辑斯蒂（logistic-函数&quot; class=&quot;headerlink&quot; title=&quot;逻辑斯蒂（logistic)函数&quot;&gt;&lt;/a&gt;逻辑斯蒂（logistic)函数&lt;/h1&gt;&lt;h2 id=&quot;逻辑斯蒂函数&quot;&gt;&lt;a href=&quot;#逻辑斯蒂函数&quot; class=&quot;headerlink&quot; title=&quot;逻辑斯蒂函数&quot;&gt;&lt;/a&gt;逻辑斯蒂函数&lt;/h2&gt;&lt;p&gt;在数学界有各种各样的分布，比如Gamma分布，二项分布，高斯分布等。利用这些分布的性质，可以解决很多的问题。这里将介绍一种函数，叫逻辑斯蒂函数或逻辑斯蒂曲线，这是一种是一种S型曲线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;  设$X$是连续随机变量，$X$服从逻辑斯蒂分布是指$X$具有下列分布函数和密度函数&lt;br&gt;$$F(x) = P(X\leq x) = \frac{1}{1+e^{-(x-u）/\gamma)} }$$&lt;br&gt;$$f(x) = F’(x) = \frac{e^{-(x-u)/\gamma}}{\gamma(1+e^{-(x-u)}/\gamma)^{2}}$$&lt;br&gt;式中，$\mu$为位置参数，$\gamma$为形状参数。看到这是不是想到，高斯、二项等其他分布。均值控制位置，方差控制形状。&lt;br&gt;逻辑斯蒂分布的密度函数$f(x)和分布函数$F(x)$的图形如下图&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6cbb8645gw1ewjejmez18j20jw08dq3g.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;看了逻辑斯蒂分布，我有两个疑问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个分布是怎么发现？&lt;/li&gt;
&lt;li&gt;在机器学习中什么用？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上网查了一下，并没有找到这个分布是怎么发现的。最早的记录是1833年，菲尔许尔斯特使用逻辑斯蒂曲线描述了人口增长速度与人口密度的关系，把数学方法引入生态学。我大一的时候参加一个数学建模入门赛的时候，就是拟合了逻辑斯特函数，模型太简单，所以就很傻很天真的看着别人载比赛喽。&lt;br&gt;到了十九世纪末，法国的社会学家塔尔德观察到，一种新思想（就比如和谐社会）的采纳率随着时间的变化遵循一种S型曲线，也有人说塔尔德实际是提出了经济增长的S型曲线。&lt;br&gt;随后的一段时间，S曲线在各个行业都大杀四方，从物种迁移数量增长到工程进展，从城市化进程到经济学的前景理论等等。&lt;br&gt;随后可能有一位天才，正在研究分类问题，猛然看到了S曲线，突然想到，咦，这个曲线(如上右图）左边随着x的变小F(x)趋近于0，右边随着想的增大F(x)趋近与一个定值，不是正好可以用来做做二分类嘛。（仅供娱乐，如有雷同纯属巧合）&lt;/p&gt;
&lt;h1 id=&quot;二项逻辑斯蒂回归模型&quot;&gt;&lt;a href=&quot;#二项逻辑斯蒂回归模型&quot; class=&quot;headerlink&quot; title=&quot;二项逻辑斯蒂回归模型&quot;&gt;&lt;/a&gt;二项逻辑斯蒂回归模型&lt;/h1&gt;&lt;p&gt;现在我们仅仅考虑二分类问题。就拿AndrewNG的讲义里面的例子，如下图所示，x表示数据点的特征——肿瘤的大小，Y为观测值——是否是恶性肿瘤。通过构建线性回归模型，如h θ (x)所示，构建线性回归模型后，即可以根据肿瘤大小，预测是否为恶性肿瘤h θ (x)≥.05为恶性，h θ (x)&amp;lt;0.5为良性。&lt;br&gt;&lt;img src=&quot;http://52opencourse.com/?qa=blob&amp;amp;qa_blobid=28151414763210940&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果上述问题使用线性分类器，效果并不好（如上图），分类效果可以用差来形容。然后你再看着这个图，是不是感觉观测值类似第一幅图？&lt;br&gt;在解决上诉问题之前，接下来我们先看看逻辑回归模型：&lt;br&gt;将逻辑回归模型定义为：&lt;br&gt;$$log\frac{\pi(X)}{1-\pi(X)}=w_1x_1+…+w_nx_p+b$$&lt;br&gt;$$=X^t\beta$$&lt;br&gt;这里&lt;br&gt;$$W=(w^1, w^2, …, w^n, b)$$&lt;/p&gt;
&lt;p&gt;$$X=(x^1, x^2, …, x^n, 1)$$&lt;/p&gt;
&lt;p&gt;$$P(Y=1|X)=\pi(X）这里的$\pi(X)%是逻辑回归中的标准表示.$$&lt;/p&gt;
&lt;p&gt;逻辑回归可以这么理解，考虑对输入X进行分类的线性函数$WX$,其至于为实数域，通过逻辑斯蒂函数，可以将线性函数$WX$转换为概率。&lt;br&gt;换一个角度，逻辑斯蒂回归模型的特点就是已经事情的发生概率是指该只见发生的概率与该事件不发生的概率的比值。一个事件的几率是p，那么该事件发生的几率是$\frac{p}{1-p}$,该事件可以理解为该事件的对数几率或logit函数是&lt;/p&gt;
&lt;p&gt;$$logit(p)=log(\frac{p}{1-p})$$&lt;/p&gt;
&lt;p&gt;经过简单推导，就可以得到标准的逻辑回归模型。&lt;br&gt;&lt;strong&gt;定义（逻辑斯蒂回归模型）&lt;/strong&gt;  二项逻辑斯蒂回归模型是如下的条件概率分布：&lt;/p&gt;
&lt;p&gt;$$P(Y=1|X) = \frac{exp(WX)}{1+exp(WX)}$$&lt;/p&gt;
&lt;p&gt;$$P(Y=0|X) = \frac{1}{1+exp(WX)}$$&lt;/p&gt;
&lt;p&gt;逻辑斯特回归模型也可以说是建立在条件概率密度$p(x|C_k)$和先验概率$P(C_k)$的基础上，使用贝叶斯理论计算后验概率密度$P(C_k|x)的模型。利用贝叶斯后验概率求解该问题，则&lt;/p&gt;
&lt;p&gt;$$P(Y=1|x) = \frac{P(x|Y=1)P(Y=1)}{p(x|Y=1)P(Y=1)+P(x|Y=0)P(Y=0)}$$&lt;br&gt;$$=\frac{1}{1+e^{ln(\frac{P(x|Y=0)P(Y=0))}{P(x|Y=1)P(Y=1)}}}$$ &lt;/p&gt;
&lt;p&gt;到这里是不是感觉后验概率$P(Y=1|x)$与逻辑斯蒂函数很像？其实从（1）式可以推导到逻辑斯蒂函数的，《PR&amp;amp;ML》这本书中借助高斯分布有一点介绍，这里就不说了。&lt;/p&gt;
&lt;h1 id=&quot;模型参数估计&quot;&gt;&lt;a href=&quot;#模型参数估计&quot; class=&quot;headerlink&quot; title=&quot;模型参数估计&quot;&gt;&lt;/a&gt;模型参数估计&lt;/h1&gt;&lt;p&gt;对于上面患病问题，对给定的数据集$T={(x^1, y^1), (x^2, y^2), .., x^N, y^N)}$$，可以应用极大私人估计模型参数，从而得到逻辑回归模型。&lt;br&gt;这里使用极大似然估计求解，极大似然估计的理解是根据现有数据，选择使模型得到现有训练集可能性最大的参数。参数估计我就直接贴出《统计学习方法》中的原文。&lt;br&gt;&lt;img src=&quot;http://i4.piimg.com/0d6d163d711f0ca0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面列出了将逻辑回归问题通过极大似然的方法转换成了最优化的问题，最优化问题有多种解决方案，这里给出使用梯度下降的完整的逻辑回归算法如下，关于最优化问题的求解请链接到&lt;a href=&quot;&quot;&gt;最优化问题(待更新）)&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://i3.piimg.com/0ddf886f38c92b17.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;正则化&quot;&gt;&lt;a href=&quot;#正则化&quot; class=&quot;headerlink&quot; title=&quot;正则化&quot;&gt;&lt;/a&gt;正则化&lt;/h1&gt;&lt;p&gt;在模型参数估计这，已经将问题变为目标函数的最优化问题。为了让降低模型的复杂度，更好的泛化，可以在使用梯度下降的时候，添加一个正则项。二分类问题的L2乘法回归最小化如下（正则化链接-等待更新）：&lt;br&gt;&lt;img src=&quot;http://scikit-learn.org/stable/_images/math/96fe247fe9465d26af15706141dc22e598ac7826.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;同样，L1正则化逻辑回归解决的优化问题如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://scikit-learn.org/stable/_images/math/3fb9bab302e67df4a9f00b8df259d326e01837fd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;多分类问题&quot;&gt;&lt;a href=&quot;#多分类问题&quot; class=&quot;headerlink&quot; title=&quot;多分类问题&quot;&gt;&lt;/a&gt;多分类问题&lt;/h1&gt;&lt;p&gt;在实际应用中，我们常常碰见多分类问题，我们如何将逻辑回归应用到上面呢？其实这里可以这样想，N分类问题，对于每一类都可以将他转换为二分类问题：是该类和非该类，每一类的逻辑模型是：&lt;br&gt;&lt;img src=&quot;http://i4.piimg.com/f83cad9cfe6687fc.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在进行分类的时候，对每一个输入的特征向量求的该类的该类，取概率最大的分类。&lt;/p&gt;
&lt;h1 id=&quot;逻辑回归实现&quot;&gt;&lt;a href=&quot;#逻辑回归实现&quot; class=&quot;headerlink&quot; title=&quot;逻辑回归实现&quot;&gt;&lt;/a&gt;逻辑回归实现&lt;/h1&gt;&lt;p&gt;请看&lt;a href=&quot;/2016/04/09/logistic实现/&quot;&gt;逻辑回归实现&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;[1]《统计学习方法》&lt;br&gt;[2] AngrewNG 《机器学习》&lt;br&gt;[3] Christopher M. Bishop: Pattern Recognition and Machine Learning, chapter4.3&lt;br&gt;[4] &lt;a href=&quot;https://www.douban.com/note/323644915/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;听课笔记（第十讲）： 逻辑斯蒂回归 (台大机器学习）&lt;/a&gt;&lt;br&gt;[5] &lt;a href=&quot;http://www.tuicool.com/articles/auQFju&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;逻辑回归模型(Logistic Regression, LR)基础&lt;/a&gt;&lt;br&gt;[6] &lt;a href=&quot;http://www.eas-journal.org/articles/eas/pdf/2014/02/eas1466008.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;logistic regression&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在Machine Learning中，逻辑斯蒂回归（Logistic Regression）是十分经典的方法,简称LR，虽然名字叫回归，但是这是线性分类模型而不是回归模型。这里面涉及到一些知识点，包括极大似然估计，损失函数，梯度下降，正则化等&lt;!--逻辑斯特回归是对条件概率密度$P(x|C/_K)$建模的，也就是后验概率$P(C/_k)$,使用它们通过贝叶斯理论来计算后验概率$P(C/_k|x).--&gt;&lt;br&gt;这篇文章的主要目的，就是通过理论与实践相结合的方式讲解LR模型，在讲解的过程中，加深对LR的理解、相关概念的梳理和应用。这篇文章中需要一些基础的数学知识，如果我没有讲到的请自行百度。这篇文章以《统计学习方法》和AndrewNg的视频为基础，加上《PR&amp;amp;MR》以及网上的资料、论文整理而成。本人能力有限，细节处理上难免有不严谨的地方或者叙述不清的地方，请留言或者发邮件wang_qian010@163.com&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="逻辑斯蒂回退" scheme="http://yoursite.com/tags/%E9%80%BB%E8%BE%91%E6%96%AF%E8%92%82%E5%9B%9E%E9%80%80/"/>
    
      <category term="Logistic regression" scheme="http://yoursite.com/tags/Logistic-regression/"/>
    
  </entry>
  
  <entry>
    <title>c++ 迭代器</title>
    <link href="http://yoursite.com/2016/04/08/c-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://yoursite.com/2016/04/08/c-迭代器/</id>
    <published>2016-04-07T16:54:36.000Z</published>
    <updated>2016-04-07T16:59:35.238Z</updated>
    
    <content type="html">&lt;p&gt;本科的时候，主要使用的是c语言做嵌入式以及python，重新学习c++,阅读《c++ primer》，同时在网上查找资料，阅读并记录下来，方便下次查阅。看到c++中的迭代器，跟python中的迭代器的概念好学差不多。&lt;/p&gt;
&lt;p&gt;迭代器的递增运算令迭代器每次移动一个元素，所有的标准库容器都支持递增运算的迭代器。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;迭代器-iterator-是一中检查容器内元素并遍历元素的数据类型。&quot;&gt;&lt;a href=&quot;#迭代器-iterator-是一中检查容器内元素并遍历元素的数据类型。&quot; class=&quot;headerlink&quot; title=&quot;迭代器(iterator)是一中检查容器内元素并遍历元素的数据类型。&quot;&gt;&lt;/a&gt;迭代器(iterator)是一中检查容器内元素并遍历元素的数据类型。&lt;/h1&gt;&lt;p&gt;(1) 每种容器类型都定义了自己的迭代器类型，如vector:&lt;br&gt;vector&lt;int&gt;::iterator iter;这条语句定义了一个名为iter的变量，它的数据类型是由vector&lt;int&gt;定义的iterator类型。&lt;br&gt;(2) 使用迭代器读取vector中的每一个元素：&lt;br&gt;vector&lt;int&gt; ivec(10,1);&lt;br&gt;for(vector&lt;int&gt;::iterator iter=ivec.begin();iter!=ivec.end();++iter)&lt;br&gt;{&lt;br&gt;&lt;em&gt;iter=2; //使用 &lt;/em&gt; 访问迭代器所指向的元素&lt;br&gt;}&lt;br&gt;const_iterator:&lt;br&gt;只能读取容器中的元素，而不能修改。&lt;br&gt;for(vector&lt;int&gt;::const_iterator citer=ivec.begin();citer!=ivec.end();citer++)&lt;br&gt;{&lt;br&gt;cout&amp;lt;&amp;lt;&lt;em&gt;citer;&lt;br&gt;//&lt;/em&gt;citer=3; error&lt;br&gt;}&lt;br&gt;vector&lt;int&gt;::const_iterator 和 const vector&lt;int&gt;::iterator的区别&lt;br&gt;const vector&lt;int&gt;::iterator newiter=ivec.begin();&lt;br&gt;&lt;em&gt;newiter=11; //可以修改指向容器的元素&lt;br&gt;//newiter++; //迭代器本身不能被修改&lt;br&gt;(3) iterator的算术操作：&lt;br&gt;iterator除了进行++,–操作，可以将iter+n,iter-n赋给一个新的iteraor对象。还可以使用一个iterator减去另外一个iterator.&lt;br&gt;const vector&lt;int&gt;::iterator newiter=ivec.begin();&lt;br&gt;vector&lt;int&gt;::iterator newiter2=ivec.end();&lt;br&gt;cout&amp;lt;&amp;lt;”\n”&amp;lt;&lt;newiter2-newiter; 1=&quot;&quot; 一個很典型使用vector的stl程式:=&quot;&quot; #include=&quot;&quot; &lt;vector=&quot;&quot;&gt;&lt;br&gt;2 #include &lt;iostream&gt;&lt;br&gt;3&lt;br&gt;4 using namespace std;&lt;br&gt;5&lt;br&gt;6 int main() {&lt;br&gt;7 vector&lt;int&gt; ivec;&lt;br&gt;8 ivec.push_back(1);&lt;br&gt;9 ivec.push_back(2);&lt;br&gt;10 ivec.push_back(3);&lt;br&gt;11 ivec.push_back(4);&lt;br&gt;12&lt;br&gt;13 for(vector&lt;int&gt;::iterator iter = ivec.begin();1. iter != ivec.end(); ++iter)&lt;br&gt;14 cout &amp;lt;&amp;lt; &lt;/int&gt;&lt;/int&gt;&lt;/iostream&gt;&lt;/newiter2-newiter;&gt;&lt;/int&gt;&lt;/int&gt;&lt;/em&gt;iter &amp;lt;&amp;lt; endl;&lt;br&gt;15 }&lt;/int&gt;&lt;/int&gt;&lt;/int&gt;&lt;/int&gt;&lt;/int&gt;&lt;/int&gt;&lt;/int&gt;&lt;/int&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Iterator（迭代器）模式&lt;br&gt;一、概述&lt;br&gt; Iterator（迭代器）模式又称Cursor（游标）模式，用于提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。或者这样说可能更容易理解：Iterator模式是运用于聚合对象的一种模式，通过运用该模式，使得我们可以在不知道对象内部表示的情况下，按照一定顺序（由iterator提供的方法）访问聚合对象中的各个元素。&lt;br&gt; 由于Iterator模式的以上特性：与聚合对象耦合，在一定程度上限制了它的广泛运用，一般仅用于底层聚合支持类，如STL的list、vector、stack等容器类及ostream_iterator等扩展iterator。&lt;br&gt; 根据STL中的分类，iterator包括：&lt;br&gt;Input Iterator：只能单步向前迭代元素，不允许修改由该类迭代器引用的元素。&lt;br&gt;Output Iterator：该类迭代器和Input Iterator极其相似，也只能单步向前迭代元素，不同的是该类迭代器对元素只有写的权力。&lt;br&gt;Forward Iterator：该类迭代器可以在一个正确的区间中进行读写操作，它拥有Input Iterator的所有特性，和Output Iterator的部分特性，以及单步向前迭代元素的能力。&lt;br&gt;Bidirectional Iterator：该类迭代器是在Forward Iterator的基础上提供了单步向后迭代元素的能力。&lt;br&gt;Random Access Iterator：该类迭代器能完成上面所有迭代器的工作，它自己独有的特性就是可以像指针那样进行算术计算，而不是仅仅只有单步向前或向后迭代。&lt;br&gt; 这五类迭代器的从属关系，如下图所示，其中箭头A→B表示，A是B的强化类型，这也说明了如果一个算法要求B，那么A也可以应用于其中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;input output&lt;br&gt;      \ /&lt;br&gt;forward&lt;br&gt;       |&lt;br&gt;bidirectional&lt;br&gt;       |&lt;br&gt;random access&lt;br&gt; 图1、五种迭代器之间的关系&lt;br&gt;    vector 和deque提供的是RandomAccessIterator，list提供的是BidirectionalIterator，set和map提供的 iterators是 ForwardIterator，关于STL中iterator迭代器的操作如下：&lt;br&gt;说明：每种迭代器均可进行包括表中前一种迭代器可进行的操作。&lt;br&gt;迭代器操作                      说明&lt;br&gt;(1)所有迭代器&lt;br&gt;p++                              后置自增迭代器&lt;br&gt;++p                              前置自增迭代器&lt;br&gt;(2)输入迭代器&lt;br&gt;&lt;em&gt;p                                 复引用迭代器，作为右值&lt;br&gt;p=p1                             将一个迭代器赋给另一个迭代器&lt;br&gt;p==p1                           比较迭代器的相等性&lt;br&gt;p!=p1                            比较迭代器的不等性&lt;br&gt;(3)输出迭代器
&lt;/em&gt;p                                 复引用迭代器，作为左值&lt;br&gt;p=p1                             将一个迭代器赋给另一个迭代器&lt;br&gt;(4)正向迭代器&lt;br&gt;提供输入输出迭代器的所有功能&lt;br&gt;(5)双向迭代器&lt;br&gt;–p                                前置自减迭代器&lt;br&gt;p–                                后置自减迭代器&lt;br&gt;(6)随机迭代器&lt;br&gt;p+=i                              将迭代器递增i位&lt;br&gt;p-=i                               将迭代器递减i位&lt;br&gt;p+i                                在p位加i位后的迭代器&lt;br&gt;p-i                                 在p位减i位后的迭代器&lt;br&gt;p[i]                                返回p位元素偏离i位的元素引用&lt;br&gt;p&lt;p1 如果迭代器p的位置在p1前，返回true，否则返回false=&quot;&quot; p&lt;=&quot;p1&quot; p的位置在p1的前面或同一位置时返回true，否则返回false=&quot;&quot; p=&quot;&quot;&gt;p1                             如果迭代器p的位置在p1后，返回true，否则返回false&lt;br&gt;p&amp;gt;=p1                           p的位置在p1的后面或同一位置时返回true，否则返回false&lt;br&gt;    只有顺序容器和关联容器支持迭代器遍历，各容器支持的迭代器的类别如下：&lt;br&gt;容器                 支持的迭代器类别            容器               支持的迭代器类别            容器                 支持的迭代器类别&lt;br&gt;vector              随机访问                      deque              随机访问                       list                   双向&lt;br&gt;set                   双向                            multiset            双向                           map                 双向&lt;br&gt;multimap          双向                             stack                不支持                        queue              不支持&lt;br&gt;priority_queue   不支持&lt;br&gt;二、结构&lt;br&gt;Iterator模式的结构如下图所示：&lt;/p1&gt;&lt;/p&gt;
&lt;p&gt;图2、Iterator模式类图示意&lt;br&gt;三、应用&lt;br&gt;    Iterator模式有三个重要的作用：&lt;br&gt;1）它支持以不同的方式遍历一个聚合.复杂的聚合可用多种方式进行遍历，如二叉树的遍历，可以采用前序、中序或后序遍历。迭代器模式使得改变遍历算法变得很容易: 仅需用一个不同的迭代器的实例代替原先的实例即可，你也可以自己定义迭代器的子类以支持新的遍历，或者可以在遍历中增加一些逻辑，如有条件的遍历等。&lt;br&gt;2）迭代器简化了聚合的接口. 有了迭代器的遍历接口，聚合本身就不再需要类似的遍历接口了，这样就简化了聚合的接口。&lt;br&gt;3）在同一个聚合上可以有多个遍历 每个迭代器保持它自己的遍历状态，因此你可以同时进行多个遍历。&lt;br&gt;4）此外，Iterator模式可以为遍历不同的聚合结构（需拥有相同的基类）提供一个统一的接口，即支持多态迭代。&lt;br&gt;    简单说来，迭代器模式也是Delegate原则的一个应用，它将对集合进行遍历的功能封装成独立的Iterator，不但简化了集合的接口，也使得修改、增 加遍历方式变得简单。从这一点讲，该模式与Bridge模式、Strategy模式有一定的相似性，但Iterator模式所讨论的问题与集合密切相关， 造成在Iterator在实现上具有一定的特殊性，具体将在示例部分进行讨论。&lt;br&gt;四、优缺点&lt;br&gt;     正如前面所说，与集合密切相关，限制了 Iterator模式的广泛使用，就个人而言，我不大认同将Iterator作为模式提出的观点，但它又确实符合模式“经常出现的特定问题的解决方案”的 特质，以至于我又不得不承认它是个模式。在一般的底层集合支持类中，我们往往不愿“避轻就重”将集合设计成集合 + Iterator 的形式，而是将遍历的功能直接交由集合完成，以免犯了“过度设计”的诟病，但是，如果我们的集合类确实需要支持多种遍历方式（仅此一点仍不一定需要考虑 Iterator模式，直接交由集合完成往往更方便），或者，为了与系统提供或使用的其它机制，如STL算法，保持一致时，Iterator模式才值得考 虑。&lt;br&gt;五、举例&lt;br&gt;    可以考虑使用两种方式来实现Iterator模式：内嵌类或者友元类。通常迭代类需访问集合类中的内部数据结构，为此，可在集合类中设置迭代类为friend class，但这不利于添加新的迭代类，因为需要修改集合类，添加friend class语句。也可以在抽象迭代类中定义protected型的存取集合类内部数据的函数，这样迭代子类就可以访问集合类数据了，这种方式比较容易添加新的迭代方式，但这种方式也存在明显的缺点：这些函数只能用于特定聚合类，并且，不可避免造成代码更加复杂。&lt;br&gt;    STL的list::iterator、deque::iterator、rbtree::iterator等采用的都是外部Iterator类的形式，虽然STL的集合类的iterator分散在各个集合类中，但由于各Iterator类具有相同的基类，保持了相同的对外的接口（包括一些traits及tags等，感兴趣者请认真阅读参考1、2），从而使得它们看起来仍然像一个整体，同时也使得应用algorithm成为可能。我们如果要扩展STL的iterator，也需要注意这一点，否则，我们扩展的iterator将可能无法应用于各algorithm。&lt;br&gt;以下是一个遍历二叉树的Iterator的例子，为了方便支持多种遍历方式，并便于遍历方式的扩展，其中还使用了Strategy模式（见笔记21）：&lt;br&gt;（注：1、虽然下面这个示例是本系列所有示例中花费我时间最多的一个，但我不得不承认，它非常不完善，感兴趣的朋友，可以考虑参考下面的参考材料将其补充完善，或提出宝贵改进意见。2、 我本想考虑将其封装成与STL风格一致的形式，使得我们遍历二叉树必须通过Iterator来进行，但由于二叉树在结构上较线性存储结构复杂，使访问必须 通过Iterator来进行，但这不可避免使得BinaryTree的访问变得异常麻烦，在具体应用中还需要认真考虑。3、以下只提供了Inorder&amp;lt;中序&amp;gt;遍历iterator的实现。）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本科的时候，主要使用的是c语言做嵌入式以及python，重新学习c++,阅读《c++ primer》，同时在网上查找资料，阅读并记录下来，方便下次查阅。看到c++中的迭代器，跟python中的迭代器的概念好学差不多。&lt;/p&gt;
&lt;p&gt;迭代器的递增运算令迭代器每次移动一个元素，所有的标准库容器都支持递增运算的迭代器。&lt;br&gt;
    
    </summary>
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="迭代器" scheme="http://yoursite.com/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
  </entry>
  
</feed>
